ascale0_nr=inputs_scenarios$ascale0_nr[i],
delta_p=inputs_scenarios$delta_p[i],
p0=inputs_scenarios$p0[i],
bshape0=inputs_scenarios$bshape0[i],
bshape1=inputs_scenarios$bshape1[i],
ascale1_r=inputs_scenarios$ascale1_r[i],
ascale1_nr=inputs_scenarios$ascale1_nr[i],
tau=inputs_scenarios$tau[i],
anticipated_effects=FALSE)
# os_effect2 = survw_effectsize(delta_p=inputs_scenarios$delta_p[i],
#                               p0=inputs_scenarios$p0[i],
#                               Delta_r=Delta_r, Delta_0=Delta_0, Delta_nr=Delta_nr, anticipated_effects=TRUE)
mean0_r = meanw_f(ascale=inputs_scenarios$ascale0_r[i],bshape=inputs_scenarios$bshape0[i])
mean1_r = meanw_f(ascale=inputs_scenarios$ascale1_r[i],bshape=inputs_scenarios$bshape1[i])
mean0_nr = meanw_f(ascale=inputs_scenarios$ascale0_nr[i],bshape=inputs_scenarios$bshape0[i])
mean1_nr = meanw_f(ascale=inputs_scenarios$ascale1_nr[i],bshape=inputs_scenarios$bshape1[i])
ascale_cens_value = 2*mean0_nr
diffmean_r = mean1_r - mean0_r
diffmean_nr = mean1_nr - mean0_nr
diffmean_0 = mean0_r - mean0_nr
median0_r = medianw_f(ascale=inputs_scenarios$ascale0_r[i],bshape=inputs_scenarios$bshape0[i])
median1_r = medianw_f(ascale=inputs_scenarios$ascale1_r[i],bshape=inputs_scenarios$bshape1[i])
median0_nr = medianw_f(ascale=inputs_scenarios$ascale0_nr[i],bshape=inputs_scenarios$bshape0[i])
median1_nr = medianw_f(ascale=inputs_scenarios$ascale1_nr[i],bshape=inputs_scenarios$bshape1[i])
diffmedian_r = median1_r - median0_r
diffmedian_nr = median1_nr - median0_nr
diffmedian_0 = median0_r - median0_nr
# var0 = var_f(ascale_r=inputs_scenarios$ascale0_r[i],ascale_nr=inputs_scenarios$ascale0_nr[i],tau=inputs_scenarios$tau[i],bshape=inputs_scenarios$bshape0[i],ascale_cens=inputs_scenarios$ascale_cens[i],p=inputs_scenarios$p0[i])
# var1 = var_f(ascale_r=inputs_scenarios$ascale1_r[i],ascale_nr=inputs_scenarios$ascale1_nr[i],tau=inputs_scenarios$tau[i],bshape=inputs_scenarios$bshape1[i],ascale_cens=inputs_scenarios$ascale_cens[i],p=p1)
var0 = var_f(ascale_r=inputs_scenarios$ascale0_r[i],ascale_nr=inputs_scenarios$ascale0_nr[i],tau=inputs_scenarios$tau[i],bshape=inputs_scenarios$bshape0[i],ascale_cens=ascale_cens_value,p=inputs_scenarios$p0[i])
var1 = var_f(ascale_r=inputs_scenarios$ascale1_r[i],ascale_nr=inputs_scenarios$ascale1_nr[i],tau=inputs_scenarios$tau[i],bshape=inputs_scenarios$bshape1[i],ascale_cens=ascale_cens_value,p=p1)
# os_samplesize = ((z_alpha+z_beta)/(os_effect))^2*(var0 + var1)/0.5
os_samplesize = survw_samplesize(ascale0_r=inputs_scenarios$ascale0_r[i],
ascale0_nr=inputs_scenarios$ascale0_nr[i],
delta_p=inputs_scenarios$delta_p[i],
p0=inputs_scenarios$p0[i],
bshape0=inputs_scenarios$bshape0[i],
bshape1=inputs_scenarios$bshape1[i],
ascale1_r=inputs_scenarios$ascale1_r[i],
ascale1_nr=inputs_scenarios$ascale1_nr[i],
ascale_cens=ascale_cens_value,
tau=inputs_scenarios$tau[i],alpha=alpha_error,beta=beta_error)
surv0_r_tau = survw_f(t=inputs_scenarios$tau[i],ascale=inputs_scenarios$ascale0_r[i],bshape=inputs_scenarios$bshape0[i])
surv0_nr_tau = survw_f(t=inputs_scenarios$tau[i],ascale=inputs_scenarios$ascale0_nr[i],bshape=inputs_scenarios$bshape0[i])
diffsurv0_tau =  surv0_r_tau - surv0_nr_tau
surv1_r_tau = survw_f(t=inputs_scenarios$tau[i],ascale=inputs_scenarios$ascale1_r[i],bshape=inputs_scenarios$bshape1[i])
surv1_nr_tau = survw_f(t=inputs_scenarios$tau[i],ascale=inputs_scenarios$ascale1_nr[i],bshape=inputs_scenarios$bshape1[i])
diffsurv1_tau =  surv1_r_tau - surv1_nr_tau
surv0_tau = survmixture_f(t=inputs_scenarios$tau[i], ascale_r=inputs_scenarios$ascale0_r[i],ascale_nr=inputs_scenarios$ascale0_nr[i], bshape=inputs_scenarios$bshape0[i], p=inputs_scenarios$p0[i])
surv1_tau = survmixture_f(t=inputs_scenarios$tau[i], ascale_r=inputs_scenarios$ascale1_r[i],ascale_nr=inputs_scenarios$ascale1_nr[i], bshape=inputs_scenarios$bshape1[i], p=p1)
diffsurv_tau =  surv1_tau - surv0_tau
data[it,]<- c(PH,
inputs_scenarios$tau[i],
inputs_scenarios$bshape0[i],
inputs_scenarios$ascale0_r[i],
inputs_scenarios$ascale0_nr[i],
inputs_scenarios$bshape1[i],
inputs_scenarios$ascale1_r[i],
inputs_scenarios$ascale1_nr[i],
mean0_r,
mean1_r,
mean0_nr,
mean1_nr,
median0_r,
median1_r,
median0_nr,
median1_nr,
diffmean_r,
diffmean_nr,
diffmean_0,
diffmedian_r,
diffmedian_nr,
diffmedian_0,
ascale_cens_value,
# inputs_scenarios$ascale_cens[i],
p1,
inputs_scenarios$p0[i],
Delta_r,
Delta_nr,
inputs_scenarios$delta_p[i],
Delta_0,
k_1,
k_0,
surv0_r_tau,
surv0_nr_tau,
diffsurv0_tau,
surv1_r_tau,
surv1_nr_tau,
diffsurv1_tau,
surv0_tau,
surv1_tau,
diffsurv_tau,
var0,
var1,
os_effect,
os_samplesize)
# os_effect2,os_effect3)
summary_data[it,]<- c(PH, cases,
inputs_scenarios$tau[i],
inputs_scenarios$bshape0[i],
inputs_scenarios$bshape1[i],
mean0_r,
mean0_nr,
median0_r,
median0_nr,
diffmean_r,
diffmean_nr,
diffmean_0,
diffmedian_r,
diffmedian_nr,
diffmedian_0,
inputs_scenarios$p0[i],
inputs_scenarios$delta_p[i],
Delta_r,
Delta_nr,
Delta_0,
k_0,
surv0_tau,
diffsurv_tau,
os_effect,
os_samplesize)
it=it+1
}
#'
## ------------------------------------------------------------------------
# head(data,20)
rm(i,it,
PH,
cases,
p1,
Delta_r,
Delta_nr,
Delta_0,
k_1,
k_0,
mean0_r,
mean1_r,
mean0_nr,
mean1_nr,
median0_r,
median1_r,
median0_nr,
median1_nr,
diffmean_r,
diffmean_nr,
diffmean_0,
diffmedian_r,
diffmedian_nr,
diffmedian_0,
surv0_tau,
surv1_tau,
diffsurv_tau,
var0,
var1,
os_effect,
os_samplesize,
beta_error,alpha_error)
# # save scenarios
# write.xlsx(inputs_scenarios, file="complete_results.xls", sheetName="inputs_scenarios", col.names=TRUE)
# write.xlsx(data, file="complete_results.xls", sheetName="complete_results", append=TRUE, col.names=TRUE)
# write.xlsx(summary_data, file="complete_results.xls", sheetName="summary_results", append=TRUE, col.names=TRUE)
#'
#'
#' # save scenarios
write.xlsx(inputs_scenarios, file="scenarios/complete_scenarios.xls", sheetName="inputs_scenarios", col.names=TRUE)
write.xlsx(data, file="scenarios/complete_scenarios.xls", sheetName="complete_results", append=TRUE, col.names=TRUE)
write.xlsx(summary_data, file="scenarios/complete_scenarios.xls", sheetName="summary_results", append=TRUE, col.names=TRUE)
rm(list = ls())
setwd("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survmixer/code_PAPER/Simulations")
source('C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survmixer/code_PAPER/Simulations/Sim_Functions.R')
path.results <- 'C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survmixer/code_PAPER/Simulations/results_sim/'
#####################################################################################
# PREAMBLE
#####################################################################################
library(survRM2)
library(survival)
library(xlsx)
data <- read.xlsx(file="scenarios/complete_scenarios.xls", sheetIndex=1, header=TRUE, colClasses=NA)
#####################################################################################
# Parameters
alpha=0.05
beta=0.2
z_alpha <- qnorm(1-alpha,0,1)
z_beta <-  qnorm(1-beta,0,1)
q_chi=qchisq(1-alpha, df=1)
# nsim: number of simulations
nsim=1000
#####################################################################################
# simulation seed
set.seed(9876)
t0=Sys.time()
data$Test_Reject=0
data$Test_Reject_LR=0
for(i in 1:dim(data)[1]){
# for(i in 1:1){
data$Test_Reject[i] <- sum(replicate(nsim,
fun_simtest(n0=data$os_samplesize[i]/2,n1=data$os_samplesize[i]/2,
p0=data$p0[i],p1=data$p1[i],
bshape0=data$bshape0[i],bshape1=data$bshape1[i],
ascale0_r=data$ascale0_r[i],ascale1_r=data$ascale1_r[i],
ascale0_nr=data$ascale0_nr[i],ascale1_nr=data$ascale1_nr[i],
ascale_cens=data$ascale_cens[i],
truncated=T,
tau=data$tau[i])) > z_alpha)/nsim
data$Test_Reject_LR[i] <- sum(replicate(nsim,
fun_simtest_LR(n0=data$os_samplesize[i]/2,n1=data$os_samplesize[i]/2,
p0=data$p0[i],p1=data$p1[i],
bshape0=data$bshape0[i],bshape1=data$bshape1[i],
ascale0_r=data$ascale0_r[i],ascale1_r=data$ascale1_r[i],
ascale0_nr=data$ascale0_nr[i],ascale1_nr=data$ascale1_nr[i],
ascale_cens=data$ascale_cens[i],
truncated=T,
tau=data$tau[i])) > q_chi)/nsim
t1=Sys.time()-t0
cat(i, "\t", data$Test_Reject[i], "\t", t1, "\n", file="results_sim/LOG_power.txt", append=TRUE)
}
t1=Sys.time()-t0
cat(t1, "\n", file="results_sim/LOG_power.txt", append=TRUE)
(t1)
rm(i)
save.image("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survmixer/code_PAPER/Simulations/results_sim/RESULTS_sim.RData")
#####################################################################################
# simulation seed
set.seed(1903)
t0=Sys.time()
data$Test_Reject_size=0
data$Test_Reject_LR_size=0
for(i in 1:dim(data)[1]){
data$Test_Reject_size[i] <- sum(replicate(nsim,
fun_simtest(n0=data$os_samplesize[i]/2,n1=data$os_samplesize[i]/2,
p0=data$p0[i],p1=data$p0[i],
bshape0=data$bshape0[i],bshape1=data$bshape0[i],
ascale0_r=data$ascale0_r[i],ascale1_r=data$ascale0_r[i],
ascale0_nr=data$ascale0_nr[i],ascale1_nr=data$ascale0_nr[i],
ascale_cens=data$ascale_cens[i],
truncated=T,
tau=data$tau[i])) > z_alpha,na.rm = T)/nsim
data$Test_Reject_LR_size[i] <- sum(replicate(nsim,
fun_simtest_LR(n0=data$os_samplesize[i]/2,n1=data$os_samplesize[i]/2,
p0=data$p0[i],p1=data$p0[i],
bshape0=data$bshape0[i],bshape1=data$bshape0[i],
ascale0_r=data$ascale0_r[i],ascale1_r=data$ascale0_r[i],
ascale0_nr=data$ascale0_nr[i],ascale1_nr=data$ascale0_nr[i],
ascale_cens=data$ascale_cens[i],
truncated=T,
tau=data$tau[i])) > q_chi)/nsim
t1=Sys.time()-t0
cat(i, "\t", data$Test_Reject_size[i], "\t", t1, "\n", file="results_sim/LOG_size.txt", append=TRUE)
}
t1=Sys.time()-t0
cat(t1, "\n", file="results_sim/LOG_size.txt", append=TRUE)
(t1)
rm(i)
save.image("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survmixer/code_PAPER/Simulations/results_sim/RESULTS_sim.RData")
# write.xlsx(): append=FALSE when we are overwriting the sheet. Otherwise use append=TRUE
# write.xlsx(data, file="scenarios/complete_scenarios.xls", sheetName="complete_results_sim", append=FALSE, col.names=TRUE)
write.xlsx(data, file="scenarios/complete_scenarios.xls", sheetName="complete_results_sim", append=TRUE, col.names=TRUE)
i=1
fun_simtest(n0=data$os_samplesize[i]/2,n1=data$os_samplesize[i]/2,
p0=data$p0[i],p1=data$p1[i],
bshape0=data$bshape0[i],bshape1=data$bshape1[i],
ascale0_r=data$ascale0_r[i],ascale1_r=data$ascale1_r[i],
ascale0_nr=data$ascale0_nr[i],ascale1_nr=data$ascale1_nr[i],
ascale_cens=data$ascale_cens[i],
truncated=T,
tau=data$tau[i])
fun_simtest(n0=data$os_samplesize[i]/2,n1=data$os_samplesize[i]/2,
p0=data$p0[i],p1=data$p1[i],
bshape0=data$bshape0[i],bshape1=data$bshape1[i],
ascale0_r=data$ascale0_r[i],ascale1_r=data$ascale1_r[i],
ascale0_nr=data$ascale0_nr[i],ascale1_nr=data$ascale1_nr[i],
ascale_cens=data$ascale_cens[i],
truncated=T,
tau=data$tau[i])
data <- read.xlsx(file="scenarios/complete_scenarios.xls", sheetIndex=1, header=TRUE, colClasses=NA)
data
data$os_samplesize[i]
data <- read.xlsx(file="scenarios/complete_scenarios.xls", sheetIndex=2, header=TRUE, colClasses=NA)
data
rm(list = ls())
setwd("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survmixer/code_PAPER/Simulations")
source('C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survmixer/code_PAPER/Simulations/Sim_Functions.R')
path.results <- 'C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survmixer/code_PAPER/Simulations/results_sim/'
#####################################################################################
# PREAMBLE
#####################################################################################
library(survRM2)
library(survival)
library(xlsx)
data <- read.xlsx(file="scenarios/complete_scenarios.xls", sheetIndex=2, header=TRUE, colClasses=NA)
#####################################################################################
# Parameters
alpha=0.05
beta=0.2
z_alpha <- qnorm(1-alpha,0,1)
z_beta <-  qnorm(1-beta,0,1)
q_chi=qchisq(1-alpha, df=1)
# nsim: number of simulations
nsim=1000
#####################################################################################
# simulation seed
set.seed(9876)
t0=Sys.time()
data$Test_Reject=0
data$Test_Reject_LR=0
for(i in 1:dim(data)[1]){
# for(i in 1:1){
data$Test_Reject[i] <- sum(replicate(nsim,
fun_simtest(n0=data$os_samplesize[i]/2,n1=data$os_samplesize[i]/2,
p0=data$p0[i],p1=data$p1[i],
bshape0=data$bshape0[i],bshape1=data$bshape1[i],
ascale0_r=data$ascale0_r[i],ascale1_r=data$ascale1_r[i],
ascale0_nr=data$ascale0_nr[i],ascale1_nr=data$ascale1_nr[i],
ascale_cens=data$ascale_cens[i],
truncated=T,
tau=data$tau[i])) > z_alpha)/nsim
data$Test_Reject_LR[i] <- sum(replicate(nsim,
fun_simtest_LR(n0=data$os_samplesize[i]/2,n1=data$os_samplesize[i]/2,
p0=data$p0[i],p1=data$p1[i],
bshape0=data$bshape0[i],bshape1=data$bshape1[i],
ascale0_r=data$ascale0_r[i],ascale1_r=data$ascale1_r[i],
ascale0_nr=data$ascale0_nr[i],ascale1_nr=data$ascale1_nr[i],
ascale_cens=data$ascale_cens[i],
truncated=T,
tau=data$tau[i])) > q_chi)/nsim
t1=Sys.time()-t0
cat(i, "\t", data$Test_Reject[i], "\t", t1, "\n", file="results_sim/LOG_power.txt", append=TRUE)
}
t1=Sys.time()-t0
cat(t1, "\n", file="results_sim/LOG_power.txt", append=TRUE)
(t1)
rm(i)
save.image("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survmixer/code_PAPER/Simulations/results_sim/RESULTS_sim.RData")
#####################################################################################
# simulation seed
set.seed(1903)
t0=Sys.time()
data$Test_Reject_size=0
data$Test_Reject_LR_size=0
for(i in 1:dim(data)[1]){
data$Test_Reject_size[i] <- sum(replicate(nsim,
fun_simtest(n0=data$os_samplesize[i]/2,n1=data$os_samplesize[i]/2,
p0=data$p0[i],p1=data$p0[i],
bshape0=data$bshape0[i],bshape1=data$bshape0[i],
ascale0_r=data$ascale0_r[i],ascale1_r=data$ascale0_r[i],
ascale0_nr=data$ascale0_nr[i],ascale1_nr=data$ascale0_nr[i],
ascale_cens=data$ascale_cens[i],
truncated=T,
tau=data$tau[i])) > z_alpha,na.rm = T)/nsim
data$Test_Reject_LR_size[i] <- sum(replicate(nsim,
fun_simtest_LR(n0=data$os_samplesize[i]/2,n1=data$os_samplesize[i]/2,
p0=data$p0[i],p1=data$p0[i],
bshape0=data$bshape0[i],bshape1=data$bshape0[i],
ascale0_r=data$ascale0_r[i],ascale1_r=data$ascale0_r[i],
ascale0_nr=data$ascale0_nr[i],ascale1_nr=data$ascale0_nr[i],
ascale_cens=data$ascale_cens[i],
truncated=T,
tau=data$tau[i])) > q_chi)/nsim
t1=Sys.time()-t0
cat(i, "\t", data$Test_Reject_size[i], "\t", t1, "\n", file="results_sim/LOG_size.txt", append=TRUE)
}
t1=Sys.time()-t0
cat(t1, "\n", file="results_sim/LOG_size.txt", append=TRUE)
(t1)
rm(i)
save.image("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survmixer/code_PAPER/Simulations/results_sim/RESULTS_sim.RData")
# write.xlsx(): append=FALSE when we are overwriting the sheet. Otherwise use append=TRUE
# write.xlsx(data, file="scenarios/complete_scenarios.xls", sheetName="complete_results_sim", append=FALSE, col.names=TRUE)
write.xlsx(data, file="scenarios/complete_scenarios.xls", sheetName="complete_results_sim", append=TRUE, col.names=TRUE)
rm(list = ls())
rm(list = ls())
setwd("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survmixer/code_PAPER/Simulations")
source('C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survmixer/code_PAPER/Simulations/Sim_Functions.R')
path.results <- 'C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survmixer/code_PAPER/Simulations/results_sim/'
#####################################################################################
# PREAMBLE
#####################################################################################
library(survRM2)
library(survival)
library(xlsx)
data <- read.xlsx(file="scenarios/complete_scenarios.xls", sheetIndex=2, header=TRUE, colClasses=NA)
#####################################################################################
# Parameters
alpha=0.05
beta=0.2
z_alpha <- qnorm(1-alpha,0,1)
z_beta <-  qnorm(1-beta,0,1)
q_chi=qchisq(1-alpha, df=1)
# nsim: number of simulations
nsim=1000
#####################################################################################
# simulation seed
set.seed(9876)
t0=Sys.time()
data$Test_Reject=0
data$Test_Reject_LR=0
for(i in 1:dim(data)[1]){
# for(i in 1:1){
data$Test_Reject[i] <- sum(replicate(nsim,
fun_simtest(n0=data$os_samplesize[i]/2,n1=data$os_samplesize[i]/2,
p0=data$p0[i],p1=data$p1[i],
bshape0=data$bshape0[i],bshape1=data$bshape1[i],
ascale0_r=data$ascale0_r[i],ascale1_r=data$ascale1_r[i],
ascale0_nr=data$ascale0_nr[i],ascale1_nr=data$ascale1_nr[i],
ascale_cens=data$ascale_cens[i],
truncated=T,
tau=data$tau[i])) > z_alpha)/nsim
data$Test_Reject_LR[i] <- sum(replicate(nsim,
fun_simtest_LR(n0=data$os_samplesize[i]/2,n1=data$os_samplesize[i]/2,
p0=data$p0[i],p1=data$p1[i],
bshape0=data$bshape0[i],bshape1=data$bshape1[i],
ascale0_r=data$ascale0_r[i],ascale1_r=data$ascale1_r[i],
ascale0_nr=data$ascale0_nr[i],ascale1_nr=data$ascale1_nr[i],
ascale_cens=data$ascale_cens[i],
truncated=T,
tau=data$tau[i])) > q_chi)/nsim
t1=Sys.time()-t0
cat(i, "\t", data$Test_Reject[i], "\t", t1, "\n", file="results_sim/LOG_power.txt", append=TRUE)
}
t1=Sys.time()-t0
cat(t1, "\n", file="results_sim/LOG_power.txt", append=TRUE)
(t1)
rm(i)
save.image("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survmixer/code_PAPER/Simulations/results_sim/RESULTS_sim.RData")
#####################################################################################
# simulation seed
set.seed(1903)
t0=Sys.time()
data$Test_Reject_size=0
data$Test_Reject_LR_size=0
for(i in 1:dim(data)[1]){
data$Test_Reject_size[i] <- sum(replicate(nsim,
fun_simtest(n0=data$os_samplesize[i]/2,n1=data$os_samplesize[i]/2,
p0=data$p0[i],p1=data$p0[i],
bshape0=data$bshape0[i],bshape1=data$bshape0[i],
ascale0_r=data$ascale0_r[i],ascale1_r=data$ascale0_r[i],
ascale0_nr=data$ascale0_nr[i],ascale1_nr=data$ascale0_nr[i],
ascale_cens=data$ascale_cens[i],
truncated=T,
tau=data$tau[i])) > z_alpha,na.rm = T)/nsim
data$Test_Reject_LR_size[i] <- sum(replicate(nsim,
fun_simtest_LR(n0=data$os_samplesize[i]/2,n1=data$os_samplesize[i]/2,
p0=data$p0[i],p1=data$p0[i],
bshape0=data$bshape0[i],bshape1=data$bshape0[i],
ascale0_r=data$ascale0_r[i],ascale1_r=data$ascale0_r[i],
ascale0_nr=data$ascale0_nr[i],ascale1_nr=data$ascale0_nr[i],
ascale_cens=data$ascale_cens[i],
truncated=T,
tau=data$tau[i])) > q_chi)/nsim
t1=Sys.time()-t0
cat(i, "\t", data$Test_Reject_size[i], "\t", t1, "\n", file="results_sim/LOG_size.txt", append=TRUE)
}
t1=Sys.time()-t0
cat(t1, "\n", file="results_sim/LOG_size.txt", append=TRUE)
(t1)
rm(i)
save.image("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survmixer/code_PAPER/Simulations/results_sim/RESULTS_sim.RData")
# write.xlsx(): append=FALSE when we are overwriting the sheet. Otherwise use append=TRUE
write.xlsx(data, file="scenarios/complete_scenarios_results.xls", sheetName="complete_results_sim", append=FALSE, col.names=TRUE)
# write.xlsx(data, file="scenarios/complete_scenarios.xls", sheetName="complete_results_sim", append=TRUE, col.names=TRUE)
summary(data)
rm(list = ls())
load("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survmixer/code_PAPER/Simulations/results_sim/RESULTS_sim.RData")
library(ggplot2)
library(gridExtra)
library(ggpubr)
data$cases = 4
for(i in 1:dim(data)[1]){
if(data$Delta_r[i]==0 & data$Delta_nr[i]==0) data$cases[i]= 1
if(data$Delta_r[i]==0 & data$Delta_nr[i]!=0) data$cases[i]= 2
if(data$Delta_r[i]!=0 & data$Delta_nr[i]==0) data$cases[i]=3
}
data$cases = as.factor(data$cases)
summary(data$cases)
data$diff_power = data$Test_Reject - data$Test_Reject_LR
data$diff_alpha = data$Test_Reject_size - data$Test_Reject_LR_size
summary(data$os_samplesize)
data = subset(data, data$os_samplesize>100 & data$os_samplesize<5000)
summary(data$os_samplesize)
summary(data$os_effect)
############
# Boxplots alpha and power
windows(height = 14, width = 14)
p1 <- ggplot(data, aes(x=cases, y=Test_Reject,  color=cases)) +
geom_boxplot()  + labs(y = "Power RMST test")+ coord_cartesian(ylim = c(0.65, 1))#+ ylim(0.65, 0.9)
p2 <- ggplot(data, aes(x=cases, y=Test_Reject_LR,  color=cases)) +
geom_boxplot()  + labs(y = "Power logrank test") + coord_cartesian(ylim = c(0.65, 1))#+ ylim(0.65, 0.9)
diff_p12 <- ggplot(data, aes(x=cases, y=diff_power,  color=cases)) +
geom_boxplot()  + labs(y = "Difference Power (RMST - logrank) ") #+ coord_cartesian(ylim = c(-0.1, 0.1))
p3 <- ggplot(data, aes(x=cases, y=Test_Reject_size, color=cases)) +
geom_boxplot() + labs(y = "Significance level RMST test")  + coord_cartesian(ylim = c(0.035, 0.08)) # + ylim(0.035, 0.09)
p4 <- ggplot(data, aes(x=cases, y=Test_Reject_LR_size, color=cases)) +
geom_boxplot()+ labs(y = "Significance level logrank test") + coord_cartesian(ylim = c(0.035, 0.08)) # + ylim(0.035, 0.09)
diff_p34 <- ggplot(data, aes(x=cases, y=diff_alpha,  color=cases)) +
geom_boxplot()  + labs(y = "Difference Significance level (RMST - logrank )")+ coord_cartesian(ylim = c(-0.03, 0.03))
figure <- ggarrange(p1,p2,diff_p12,p3,p4,diff_p34, ncol=3, nrow=2, common.legend = TRUE, legend="bottom")
annotate_figure(figure,
top = text_grob("Power and Significance level",
# top = text_grob(expression(paste("Power and Significance level (", bshape^{(0)}, "=", bshape^{(1)}, ")")),
face = "bold", size = 14))
windows(height = 14, width = 12)
figure_mod <- ggarrange(p1,p2,p3,p4, ncol=2, nrow=2, common.legend = TRUE, legend="bottom")
annotate_figure(figure_mod,
top = text_grob("Power and Significance level",
# top = text_grob(expression(paste("Power and Significance level (", bshape^{(0)}, "=", bshape^{(1)}, ")")),
face = "bold", size = 14))
summary(data$cases==1,)
summary(data$cases=1,)
summary(data[data$cases==1,])
summary(data[data$cases==2,])
summary(data[data$cases==3,])
summary(data[data$cases==4,])
