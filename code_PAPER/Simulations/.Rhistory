inputs_scenarios$lambda1_nr[i],
mean0_r,
mean1_r,
mean0_nr,
mean1_nr,
median0_r,
median1_r,
median0_nr,
median1_nr,
diffmean_r,
diffmean_nr,
diffmean_0,
diffmedian_r,
diffmedian_nr,
diffmedian_0,
lambda_cens_value,
# inputs_scenarios$lambda_cens[i],
p1,
inputs_scenarios$p0[i],
Delta_r,
Delta_nr,
inputs_scenarios$delta_p[i],
Delta_0,
k_1,
k_0,
surv0_r_tau,
surv0_nr_tau,
diffsurv0_tau,
surv1_r_tau,
surv1_nr_tau,
diffsurv1_tau,
surv0_tau,
surv1_tau,
diffsurv_tau,
var0,
var1,
os_effect,
os_samplesize)
# os_effect2,os_effect3)
summary_data[it,]<- c(PH, cases,
inputs_scenarios$tau[i],
inputs_scenarios$beta0[i],
inputs_scenarios$beta1[i],
mean0_r,
mean0_nr,
median0_r,
median0_nr,
diffmean_r,
diffmean_nr,
diffmean_0,
diffmedian_r,
diffmedian_nr,
diffmedian_0,
inputs_scenarios$p0[i],
inputs_scenarios$delta_p[i],
Delta_r,
Delta_nr,
Delta_0,
k_0,
surv0_tau,
diffsurv_tau,
os_effect,
os_samplesize)
it=it+1
}
#'
## ------------------------------------------------------------------------
# head(data,20)
rm(i,it,
PH,
cases,
p1,
Delta_r,
Delta_nr,
Delta_0,
k_1,
k_0,
mean0_r,
mean1_r,
mean0_nr,
mean1_nr,
median0_r,
median1_r,
median0_nr,
median1_nr,
diffmean_r,
diffmean_nr,
diffmean_0,
diffmedian_r,
diffmedian_nr,
diffmedian_0,
surv0_tau,
surv1_tau,
diffsurv_tau,
var0,
var1,
os_effect,
os_samplesize,
beta_error,alpha_error)
# # save scenarios
# write.xlsx(inputs_scenarios, file="complete_results.xls", sheetName="inputs_scenarios", col.names=TRUE)
# write.xlsx(data, file="complete_results.xls", sheetName="complete_results", append=TRUE, col.names=TRUE)
# write.xlsx(summary_data, file="complete_results.xls", sheetName="summary_results", append=TRUE, col.names=TRUE)
#'
#'
#' # save scenarios
write.xlsx(inputs_scenarios, file="scenarios/complete_scenarios.xls", sheetName="inputs_scenarios", col.names=TRUE)
write.xlsx(data, file="scenarios/complete_scenarios.xls", sheetName="complete_results", append=TRUE, col.names=TRUE)
write.xlsx(summary_data, file="scenarios/complete_scenarios.xls", sheetName="summary_results", append=TRUE, col.names=TRUE)
View(data)
rm(list = ls())
rm(list = ls())
setwd("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survmixer/code_PAPER/Simulations")
source('C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survmixer/code_PAPER/Simulations/Sim_Functions.R')
path.results <- 'C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survmixer/code_PAPER/Simulations/results_sim/'
#####################################################################################
# PREAMBLE
#####################################################################################
library(survRM2)
library(survival)
library(xlsx)
################################################################
# SIMULATIONS MDA Research
# Marta Bofill and Guadalupe GÃ³mez
################################################################
rm(list = ls())
setwd("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survmixer/code_PAPER/Simulations")
source('C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survmixer/code_PAPER/Simulations/Sim_Functions.R')
path.results <- 'C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survmixer/code_PAPER/Simulations/results_sim/'
#####################################################################################
# PREAMBLE
#####################################################################################
library(survRM2)
library(survival)
library(xlsx)
data <- read.xlsx(file="scenarios/complete_scenarios.xls", sheetIndex=2, header=TRUE, colClasses=NA)
View(data)
# Preparing the scenarios
rm(list = ls())
setwd("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survmixer/code_PAPER/Simulations")
# install.packages(c("xlsx", "readxl", "knitr", "dplyr", "tidyverse", "tidyr"))
library(xlsx)
library(readxl)
library(knitr)
library(plyr)
library(tidyverse)
library(tidyr)
# getwd()
#'
#' Reading the scenarios
## ------------------------------------------------------------------------
inputs_scenarios <- read_excel("scenarios/inputs_scenarios.xls")
# sum(duplicated(inputs_scenarios))
inputs_scenarios <- inputs_scenarios[!duplicated(inputs_scenarios), ]
p0 = c(0.1,0.3)
delta_p =c(0.1,0.3)
inputs_scenarios = expand_grid(inputs_scenarios,p0,delta_p)
rm(p0,delta_p)
# write.xlsx(inputs_scenarios, file="scenarios/inputs_scenarios2_test.xls", sheetName="inputs_scenarios", append=TRUE, col.names=TRUE)
##########################################################################################
purl("Functions_Vignette.Rmd", output = "Functions.R", documentation = 2)
source('Functions.R')
# getwd()
#'
#' Significance level and power
## ------------------------------------------------------------------------
alpha_error=0.05
beta_error=0.2
# z_alpha <- qnorm(1-alpha_error,0,1)
# z_beta <-  qnorm(1-beta_error,0,1)
#'
## Creating results table
## ------------------------------------------------------------------------
data <- data.frame(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
data <- rename(data,c('c(0)'='Scenario',
X0 = 'PH',
X0.1 = 'tau',
X0.2 = 'beta0',
X0.3 = 'lambda0_r',
X0.4 = 'lambda0_nr',
X0.5 = 'beta1',
X0.6 = 'lambda1_r',
X0.7 = 'lambda1_nr',
X0.8 = 'mean0_r',
X0.9 = 'mean1_r',
X0.10 = 'mean0_nr',
X0.11 = 'mean1_nr',
X0.12 = 'median0_r',
X0.13 = 'median1_r',
X0.14 = 'median0_nr',
X0.15 = 'median1_nr',
X0.16 = 'diffmean_r',
X0.17 = 'diffmean_nr',
X0.18 = 'diffmean_0',
X0.19 = 'diffmedian_r',
X0.20 = 'diffmedian_nr',
X0.21 = 'diffmedian_0',
X0.22 = 'lambda_cens',
X0.23 = 'p1',
X0.24 = 'p0',
X0.25 = 'Delta_r',
X0.26 = 'Delta_nr',
X0.27 = 'delta_p',
X0.28 = 'Delta_0',
X0.29 = 'k_1',
X0.30 = 'k_0',
X0.31 = 'surv0_r_tau',
X0.32 = 'surv0_nr_tau',
X0.33 = 'diffsurv0_tau',
X0.34 = 'surv1_r_tau',
X0.35 = 'surv1_nr_tau',
X0.36 = 'diffsurv1_tau',
X0.37 = 'surv0_tau',
X0.38 = 'surv1_tau',
X0.39 = 'diffsurv_tau',
X0.40 = 'var0',
X0.41 = 'var1',
X0.42 = 'os_effect',
X0.43 = 'os_samplesize'
))
summary_data <- data.frame(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
summary_data <- rename(summary_data, c('c(0)'='Scenario',
X0 =  'PH',
X0.1 =  'cases',
X0.2 = 'tau',
X0.3 = 'beta0',
X0.4 = 'beta1',
X0.5 = 'mean0_r',
X0.6 = 'mean0_nr',
X0.7 = 'median0_r',
X0.8 = 'median0_nr',
X0.9 = 'diffmean_r',
X0.10 = 'diffmean_nr',
X0.11 = 'diffmean_0',
X0.12 = 'diffmedian_r',
X0.13 = 'diffmedian_nr',
X0.14 = 'diffmedian_0',
X0.15 = 'p0',
X0.16 = 'delta_p',
X0.17 = 'Delta_r',
X0.18 = 'Delta_nr',
X0.19 = 'Delta_0',
X0.20 = 'k_0',
X0.21 = 'surv0_tau',
X0.22 = 'diffsurv_tau',
X0.23 = 'os_effect',
X0.24 = 'os_samplesize'))
View(data)
rm(list = ls())
rm(list = ls())
setwd("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survmixer/code_PAPER/Simulations")
source('C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survmixer/code_PAPER/Simulations/Sim_Functions.R')
path.results <- 'C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survmixer/code_PAPER/Simulations/results_sim/'
#####################################################################################
# PREAMBLE
#####################################################################################
library(survRM2)
library(survival)
library(xlsx)
data <- read.xlsx(file="scenarios/complete_scenarios.xls", sheetIndex=2, header=TRUE, colClasses=NA)
#####################################################################################
# Parameters
alpha=0.05
beta=0.2
z_alpha <- qnorm(1-alpha,0,1)
z_beta <-  qnorm(1-beta,0,1)
q_chi=qchisq(1-alpha, df=1)
# nsim: number of simulations
nsim=1000
#####################################################################################
# simulation seed
set.seed(9876)
t0=Sys.time()
data$Test_Reject=0
data$Test_Reject_LR=0
for(i in 1:dim(data)[1]){
# for(i in 1:1){
data$Test_Reject[i] <- sum(replicate(nsim,
fun_simtest(n0=data$os_samplesize[i]/2,n1=data$os_samplesize[i]/2,
p0=data$p0[i],p1=data$p1[i],
bet0=data$beta0[i],bet1=data$beta1[i],
lambda_r0=data$lambda0_r[i],lambda_r1=data$lambda1_r[i],
lambda_nr0=data$lambda0_nr[i],lambda_nr1=data$lambda1_nr[i],
lambda_cens=data$lambda_cens[i],
truncated=T,
tau=data$tau[i])) > z_alpha)/nsim
data$Test_Reject_LR[i] <- sum(replicate(nsim,
fun_simtest_LR(n0=data$os_samplesize[i]/2,n1=data$os_samplesize[i]/2,
p0=data$p0[i],p1=data$p1[i],
bet0=data$beta0[i],bet1=data$beta1[i],
lambda_r0=data$lambda0_r[i],lambda_r1=data$lambda1_r[i],
lambda_nr0=data$lambda0_nr[i],lambda_nr1=data$lambda1_nr[i],
lambda_cens=data$lambda_cens[i],
truncated=T,
tau=data$tau[i])) > q_chi)/nsim
t1=Sys.time()-t0
cat(i, "\t", data$Test_Reject[i], "\t", t1, "\n", file="results_sim/LOG_power.txt", append=TRUE)
}
t1=Sys.time()-t0
cat(t1, "\n", file="results_sim/LOG_power.txt", append=TRUE)
(t1)
rm(i)
save.image("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survmixer/code_PAPER/Simulations/results_sim/RESULTS_sim.RData")
#####################################################################################
# simulation seed
set.seed(1903)
t0=Sys.time()
data$Test_Reject_size=0
data$Test_Reject_LR_size=0
for(i in 1:dim(data)[1]){
data$Test_Reject_size[i] <- sum(replicate(nsim,
fun_simtest(n0=data$os_samplesize[i]/2,n1=data$os_samplesize[i]/2,
p0=data$p0[i],p1=data$p0[i],
bet0=data$beta0[i],bet1=data$beta0[i],
lambda_r0=data$lambda0_r[i],lambda_r1=data$lambda0_r[i],
lambda_nr0=data$lambda0_nr[i],lambda_nr1=data$lambda0_nr[i],
lambda_cens=data$lambda_cens[i],
truncated=T,
tau=data$tau[i])) > z_alpha,na.rm = T)/nsim
data$Test_Reject_LR_size[i] <- sum(replicate(nsim,
fun_simtest_LR(n0=data$os_samplesize[i]/2,n1=data$os_samplesize[i]/2,
p0=data$p0[i],p1=data$p0[i],
bet0=data$beta0[i],bet1=data$beta0[i],
lambda_r0=data$lambda0_r[i],lambda_r1=data$lambda0_r[i],
lambda_nr0=data$lambda0_nr[i],lambda_nr1=data$lambda0_nr[i],
lambda_cens=data$lambda_cens[i],
truncated=T,
tau=data$tau[i])) > q_chi)/nsim
t1=Sys.time()-t0
cat(i, "\t", data$Test_Reject_size[i], "\t", t1, "\n", file="results_sim/LOG_size.txt", append=TRUE)
}
t1=Sys.time()-t0
cat(t1, "\n", file="results_sim/LOG_size.txt", append=TRUE)
(t1)
rm(i)
save.image("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survmixer/code_PAPER/Simulations/results_sim/RESULTS_sim.RData")
# write.xlsx(): append=FALSE when we are overwriting the sheet. Otherwise use append=TRUE
write.xlsx(data, file="scenarios/complete_scenarios.xls", sheetName="complete_results_sim", append=FALSE, col.names=TRUE)
# write.xlsx(data, file="scenarios/complete_scenarios.xls", sheetName="complete_results_sim", append=TRUE, col.names=TRUE)
#####################################################################################
#####################################################################################
# PLOTS
set.seed(4213)
pdf(paste0(path.results,'plots_survival.pdf'),width = 7, height =7*4/3)
par(mfrow=c(3,2),las=2,cex.main=0.8,cex.axis=0.8)
# plot(data$Test_Reject_size,ylab="Empirical alpha RMST-test",cex = 1,pch=19, ylim=c(0,0.1)); abline(h=0.05, col=2)
# plot(data$Test_Reject,ylab="Empirical power RMST-test",cex = 1,pch=19, ylim=c(0.75,1)); abline(h=0.8, col=3)
for(i in 1:dim(data)[1]){
# for(i in 1:1){
data_aux <- fun_sim(n0=data$os_samplesize[i]/2,n1=data$os_samplesize[i]/2,
p0=data$p0[i],p1=data$p1[i],
bet0=data$beta0[i],bet1=data$beta1[i],
lambda_r0=data$lambda0_r[i],lambda_r1=data$lambda1_r[i],
lambda_nr0=data$lambda0_nr[i],lambda_nr1=data$lambda1_nr[i],
lambda_cens=data$lambda_cens[i],
tau=data$tau[i],truncated=T)
surv.obj <- with(data_aux,Surv(time,status))
survfit.obj <- survfit(surv.obj~treat,data = data_aux)
plot(survfit.obj,col=1:2,lwd=2,main=data$NA.[i],mark.time=TRUE,ylab='KM')
}
dev.off()
dev.off()
load("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survmixer/code_PAPER/Simulations/results_sim/RESULTS_sim_PH.RData")
rm(list = ls())
load("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survmixer/code_PAPER/Simulations/results_sim/RESULTS_sim.RData")
library(ggplot2)
library(gridExtra)
library(ggpubr)
rm(list = ls())
load("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survmixer/code_PAPER/Simulations/results_sim/RESULTS_sim.RData")
library(ggplot2)
library(gridExtra)
library(ggpubr)
data$cases = 4
for(i in 1:dim(data)[1]){
if(data$Delta_r[i]==0 & data$Delta_nr[i]==0) data$cases[i]= 1
if(data$Delta_r[i]==0 & data$Delta_nr[i]!=0) data$cases[i]= 2
if(data$Delta_r[i]!=0 & data$Delta_nr[i]==0) data$cases[i]=3
}
data$cases = as.factor(data$cases)
summary(data$cases)
data$diff_power = data$Test_Reject - data$Test_Reject_LR
data$diff_alpha = data$Test_Reject_size - data$Test_Reject_LR_size
summary(data$os_samplesize)
data = subset(data, data$os_samplesize>100 & data$os_samplesize<5000)
summary(data$os_samplesize)
summary(data$os_effect)
############
# Boxplots alpha and power
windows(height = 14, width = 14)
p1 <- ggplot(data, aes(x=cases, y=Test_Reject,  color=cases)) +
geom_boxplot()  + labs(y = "Power RMST test")+ coord_cartesian(ylim = c(0.65, 1))#+ ylim(0.65, 0.9)
p2 <- ggplot(data, aes(x=cases, y=Test_Reject_LR,  color=cases)) +
geom_boxplot()  + labs(y = "Power logrank test") + coord_cartesian(ylim = c(0.65, 1))#+ ylim(0.65, 0.9)
diff_p12 <- ggplot(data, aes(x=cases, y=diff_power,  color=cases)) +
geom_boxplot()  + labs(y = "Difference Power (RMST - logrank) ") #+ coord_cartesian(ylim = c(-0.1, 0.1))
p3 <- ggplot(data, aes(x=cases, y=Test_Reject_size, color=cases)) +
geom_boxplot() + labs(y = "Significance level RMST test")  + coord_cartesian(ylim = c(0.035, 0.08)) # + ylim(0.035, 0.09)
p4 <- ggplot(data, aes(x=cases, y=Test_Reject_LR_size, color=cases)) +
geom_boxplot()+ labs(y = "Significance level logrank test") + coord_cartesian(ylim = c(0.035, 0.08)) # + ylim(0.035, 0.09)
diff_p34 <- ggplot(data, aes(x=cases, y=diff_alpha,  color=cases)) +
geom_boxplot()  + labs(y = "Difference Significance level (RMST - logrank )")+ coord_cartesian(ylim = c(-0.03, 0.03))
figure <- ggarrange(p1,p2,diff_p12,p3,p4,diff_p34, ncol=3, nrow=2, common.legend = TRUE, legend="bottom")
annotate_figure(figure, top = text_grob(expression(paste("Power and Significance level (", beta^{(0)}, "=", beta^{(1)}, ")")),
# expression("Fuel Efficiency"~(beta_0*Omega)),
face = "bold", size = 14))
# Sample size and effect size
windows(height = 14, width = 14)
p5 <- ggplot(data, aes(x=cases, y=os_samplesize,  color=cases)) +
geom_boxplot(outlier.shape = NA) + labs(y = "Sample size") #+ scale_y_continuous(limits = quantile(data$os_samplesize, c(0.1, 0.9)))
p5_bis <-  ggplot(data, aes(x=NA., y=os_samplesize, shape=cases, color=cases)) + geom_point(size=2)+ labs(y = "Sample size",x = "Scenarios") +
theme(legend.position = "none",  axis.text.x = element_blank())
p6 <- ggplot(data, aes(x=cases, y=os_effect,  color=cases)) +
geom_boxplot() + labs(y = "Effect size")
p6_bis <- ggplot(data, aes(x=NA., y=os_effect, shape=cases, color=cases)) + geom_point(size=2)+ labs(y = "Effect size",x = "Scenarios")+
theme(legend.position = "none",  axis.text.x = element_blank())
figure2 <- ggarrange(p5,p5_bis,p6,p6_bis, ncol=2, nrow=2, common.legend = TRUE, legend="bottom")
annotate_figure(figure2, top = text_grob(expression(paste("Sample size and Effect size (", beta^{(0)}, "=", beta^{(1)}, ")")),
# expression("Fuel Efficiency"~(beta_0*Omega)),
face = "bold", size = 14))
############
# Scatterplots alpha and power
windows(height = 14, width = 14)
par(mfrow = c(2, 2))
p1 <- ggplot(data, aes(x=NA., y=Test_Reject, shape=cases, color=cases)) +
geom_point(size=2)+ ylim(0.65, 0.9) + labs(y = "Power RMST test")
p2 <- ggplot(data, aes(x=NA., y=Test_Reject_LR, shape=cases, color=cases)) +
geom_point(size=2)+ ylim(0.65, 0.9) + labs(y = "Power logrank test")
p3 <- ggplot(data, aes(x=NA., y=Test_Reject_size  , shape=cases, color=cases)) +
geom_point(size=2)+ ylim(0.035, 0.09) + labs(y = "Significance level RMST test")
p4 <- ggplot(data, aes(x=NA., y=Test_Reject_LR_size, shape=cases, color=cases)) +
geom_point(size=2)+ ylim(0.035, 0.09) + labs(y = "Significance level logrank test")
grid.arrange(p1,p2,p3,p4, ncol=2)
rm(list = ls())
load("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survmixer/code_PAPER/Simulations/results_sim/RESULTS_sim.RData")
library(ggplot2)
library(gridExtra)
library(ggpubr)
data$cases = 4
for(i in 1:dim(data)[1]){
if(data$Delta_r[i]==0 & data$Delta_nr[i]==0) data$cases[i]= 1
if(data$Delta_r[i]==0 & data$Delta_nr[i]!=0) data$cases[i]= 2
if(data$Delta_r[i]!=0 & data$Delta_nr[i]==0) data$cases[i]=3
}
data$cases = as.factor(data$cases)
summary(data$cases)
data$diff_power = data$Test_Reject - data$Test_Reject_LR
data$diff_alpha = data$Test_Reject_size - data$Test_Reject_LR_size
summary(data$os_samplesize)
data = subset(data, data$os_samplesize>100 & data$os_samplesize<5000)
summary(data$os_samplesize)
summary(data$os_effect)
windows(height = 14, width = 14)
p5 <- ggplot(data, aes(x=cases, y=os_samplesize,  color=cases)) +
geom_boxplot(outlier.shape = NA) + labs(y = "Sample size") #+ scale_y_continuous(limits = quantile(data$os_samplesize, c(0.1, 0.9)))
p5_bis <-  ggplot(data, aes(x=NA., y=os_samplesize, shape=cases, color=cases)) + geom_point(size=2)+ labs(y = "Sample size",x = "Scenarios") +
theme(legend.position = "none",  axis.text.x = element_blank())
p6 <- ggplot(data, aes(x=cases, y=os_effect,  color=cases)) +
geom_boxplot() + labs(y = "Effect size")
p6_bis <- ggplot(data, aes(x=NA., y=os_effect, shape=cases, color=cases)) + geom_point(size=2)+ labs(y = "Effect size",x = "Scenarios")+
theme(legend.position = "none",  axis.text.x = element_blank())
figure2 <- ggarrange(p5,p5_bis,p6,p6_bis, ncol=2, nrow=2, common.legend = TRUE, legend="bottom")
annotate_figure(figure2, top = text_grob("Sample size and Effect size",
# expression(paste("Sample size and Effect size (", beta^{(0)}, "=", beta^{(1)}, ")")),
face = "bold", size = 14))
figure2 <- ggarrange(p5,p6, ncol=2, nrow=1, common.legend = TRUE, legend="bottom")
annotate_figure(figure2, top = text_grob("Sample size and Effect size",
# expression(paste("Sample size and Effect size (", beta^{(0)}, "=", beta^{(1)}, ")")),
face = "bold", size = 14))
windows(height = 7, width = 14)
figure2_bis <- ggarrange(p5,p6, ncol=2, nrow=1, common.legend = TRUE, legend="bottom")
annotate_figure(figure2, top = text_grob("Sample size and Effect size",
# expression(paste("Sample size and Effect size (", beta^{(0)}, "=", beta^{(1)}, ")")),
face = "bold", size = 14))
summary(data$os_samplesize)
summary(data$os_effect)
windows(height = 7, width = 14)
figure2_bis <- ggarrange(p5,p6, ncol=2, nrow=1, common.legend = TRUE, legend="bottom")
annotate_figure(figure2, top = text_grob("Sample size and Effect size (in terms of RMST difference)",
# expression(paste("Sample size and Effect size (", beta^{(0)}, "=", beta^{(1)}, ")")),
face = "bold", size = 14))
p5 <- ggplot(data, aes(x=cases, y=os_samplesize,  color=cases)) +
geom_boxplot(outlier.shape = NA) + labs(y = "Sample size") #+ scale_y_continuous(limits = quantile(data$os_samplesize, c(0.1, 0.9)))
p5_bis <-  ggplot(data, aes(x=NA., y=os_samplesize, shape=cases, color=cases)) + geom_point(size=2)+ labs(y = "Sample size",x = "Scenarios") +
theme(legend.position = "none",  axis.text.x = element_blank())
p6 <- ggplot(data, aes(x=cases, y=os_effect,  color=cases)) +
geom_boxplot() + labs(y = "Effect size (RMST difference)")
p6_bis <- ggplot(data, aes(x=NA., y=os_effect, shape=cases, color=cases)) + geom_point(size=2)+ labs(y = "Effect size",x = "Scenarios")+
theme(legend.position = "none",  axis.text.x = element_blank())
figure2 <- ggarrange(p5,p5_bis,p6,p6_bis, ncol=2, nrow=2, common.legend = TRUE, legend="bottom")
annotate_figure(figure2, top = text_grob("Sample size and Effect size",
# expression(paste("Sample size and Effect size (", beta^{(0)}, "=", beta^{(1)}, ")")),
face = "bold", size = 14))
windows(height = 7, width = 14)
windows(height = 7, width = 10)
figure2_bis <- ggarrange(p5,p6, ncol=2, nrow=1, common.legend = TRUE, legend="bottom")
annotate_figure(figure2, top = text_grob("Sample size and Effect size (in terms of RMST difference)",
# expression(paste("Sample size and Effect size (", beta^{(0)}, "=", beta^{(1)}, ")")),
face = "bold", size = 14))
windows(height = 7, width = 10)
figure2_bis <- ggarrange(p5,p6, ncol=2, nrow=1, common.legend = TRUE, legend="bottom")
annotate_figure(figure2_bis, top = text_grob("Sample size and Effect size (in terms of RMST difference)",
# expression(paste("Sample size and Effect size (", beta^{(0)}, "=", beta^{(1)}, ")")),
face = "bold", size = 14))
annotate_figure(figure2_bis, top = text_grob("Sample size and Effect size",
# expression(paste("Sample size and Effect size (", beta^{(0)}, "=", beta^{(1)}, ")")),
face = "bold", size = 14))
windows(height = 7, width = 10)
figure2_bis <- ggarrange(p5,p6, ncol=2, nrow=1, common.legend = TRUE, legend="bottom")
annotate_figure(figure2_bis, top = text_grob("Sample size and Effect size",
# expression(paste("Sample size and Effect size (", beta^{(0)}, "=", beta^{(1)}, ")")),
face = "bold", size = 14))
