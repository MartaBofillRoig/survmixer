wscale0_r = param_scale(s=s0_r, t=5)
wscale1_nr = param_scale(s=s1_nr, t=5)
wscale0_nr = param_scale(s=s0_nr, t=5)
# Censoring distribution
# mean0_nr = meanw_f(ascale=wscale0_nr,bshape=1)
# ascale_c = 2*mean0_nr
# Response pCR
p1=45/117
p0=23/118
p= 68/235
################################################################
# Simulation study
library(survRM2)
library(survival)
source('C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survmixer/code_PAPER/Simulations/Sim_Functions.R')
# library(xlsx)
set.seed(1452)
# set.seed(2020)
alpha=0.05
beta=0.2
z_alpha <- qnorm(1-alpha,0,1)
z_beta <-  qnorm(1-beta,0,1)
q_chi=qchisq(1-alpha, df=1)
# nsim: number of simulations
nsim=10000
# Using our design
(n= survw_samplesize(ascale0_r=wscale0_r, ascale0_nr=wscale0_nr, delta_p=p1-p0, p0=p0, bshape0=1, bshape1=1, ascale1_r=wscale1_r,
ascale1_nr=wscale1_nr,
# ascale_cens = ascale_c,
ascale_cens = 7,
tau=5, alpha=0.05, beta=0.2))
power_rmst <- sum(replicate(nsim, fun_simtest(n0=n/2,n1=n/2,
p0=p0,p1=p1,
bshape0=1,bshape1=1,
ascale0_r=wscale0_r,ascale1_r=wscale1_r,
ascale0_nr=wscale0_nr,ascale1_nr=wscale1_nr,
# ascale_cens=ascale_c,
ascale_cens=7,
tau=5,truncated=T)) > z_alpha)/nsim
power_lr <- sum(replicate(nsim,  fun_simtest_LR(n0=n/2,n1=n/2,
p0=p0,p1=p1,
bshape0=1,bshape1=1,
ascale0_r=wscale0_r,ascale1_r=wscale1_r,
ascale0_nr=wscale0_nr,ascale1_nr=wscale1_nr,
# ascale_cens=ascale_c,
ascale_cens=7,
tau=5,truncated=T)) > q_chi)/nsim
(c(power_rmst,power_lr))
################################################################
# Different censoring situations
1-survw_f(t=5,ascale=5,bshape=1)
1-survw_f(t=5,ascale=7,bshape=1)
1-survw_f(t=5,ascale=10,bshape=1)
ascale_cens1=5
ascale_cens2=10
(n= survw_samplesize(ascale0_r=wscale0_r, ascale0_nr=wscale0_nr, delta_p=p1-p0, p0=p0, bshape0=1, bshape1=1, ascale1_r=wscale1_r,
ascale1_nr=wscale1_nr,
ascale_cens = ascale_cens1,
tau=5, alpha=0.05, beta=0.2))
power_rmst1 <- sum(replicate(nsim, fun_simtest(n0=n/2,n1=n/2,
p0=p0,p1=p1,
bshape0=1,bshape1=1,
ascale0_r=wscale0_r,ascale1_r=wscale1_r,
ascale0_nr=wscale0_nr,ascale1_nr=wscale1_nr,
# ascale_cens=ascale_c,
ascale_cens=ascale_cens1,
tau=5,truncated=T)) > z_alpha)/nsim
power_lr1 <- sum(replicate(nsim,  fun_simtest_LR(n0=n/2,n1=n/2,
p0=p0,p1=p1,
bshape0=1,bshape1=1,
ascale0_r=wscale0_r,ascale1_r=wscale1_r,
ascale0_nr=wscale0_nr,ascale1_nr=wscale1_nr,
# ascale_cens=ascale_c,
ascale_cens=ascale_cens1,
tau=5,truncated=T)) > q_chi)/nsim
# (c(power_rmst,power_lr))
(n= survw_samplesize(ascale0_r=wscale0_r, ascale0_nr=wscale0_nr, delta_p=p1-p0, p0=p0, bshape0=1, bshape1=1, ascale1_r=wscale1_r,
ascale1_nr=wscale1_nr,
# ascale_cens = ascale_c,
ascale_cens = ascale_cens2,
tau=5, alpha=0.05, beta=0.2))
power_rmst2 <- sum(replicate(nsim, fun_simtest(n0=n/2,n1=n/2,
p0=p0,p1=p1,
bshape0=1,bshape1=1,
ascale0_r=wscale0_r,ascale1_r=wscale1_r,
ascale0_nr=wscale0_nr,ascale1_nr=wscale1_nr,
# ascale_cens=ascale_c,
ascale_cens=ascale_cens2,
tau=5,truncated=T)) > z_alpha)/nsim
power_lr2 <- sum(replicate(nsim,  fun_simtest_LR(n0=n/2,n1=n/2,
p0=p0,p1=p1,
bshape0=1,bshape1=1,
ascale0_r=wscale0_r,ascale1_r=wscale1_r,
ascale0_nr=wscale0_nr,ascale1_nr=wscale1_nr,
# ascale_cens=ascale_c,
ascale_cens=ascale_cens2,
tau=5,truncated=T)) > q_chi)/nsim
list(power_rmst=power_rmst,power_lr=power_lr,power_rmst1=power_rmst1,power_lr1=power_lr1,power_rmst2=power_rmst2,power_lr2=power_lr2)
################################################################
# Using NOAH's design
powerNT_rmst <- sum(replicate(nsim, fun_simtest(n0=118,n1=117,
p0=p0,p1=p1,
bshape0=1,bshape1=1,
ascale0_r=wscale0_r,ascale1_r=wscale1_r,
ascale0_nr=wscale0_nr,ascale1_nr=wscale1_nr,
# ascale_cens=ascale_c,
ascale_cens=7,
tau=3,truncated=T)) > z_alpha)/nsim
powerNT_lr <- sum(replicate(nsim,  fun_simtest_LR(n0=118,n1=117,
p0=p0,p1=p1,
bshape0=1,bshape1=1,
ascale0_r=wscale0_r,ascale1_r=wscale1_r,
ascale0_nr=wscale0_nr,ascale1_nr=wscale1_nr,
# ascale_cens=ascale_c,
ascale_cens=7,
tau=3,truncated=T)) > q_chi)/nsim
(c(powerNT_rmst,powerNT_lr))
# Simulations under different censoring situations
powerNT_rmst1 <- sum(replicate(nsim, fun_simtest(n0=118,n1=117,
p0=p0,p1=p1,
bshape0=1,bshape1=1,
ascale0_r=wscale0_r,ascale1_r=wscale1_r,
ascale0_nr=wscale0_nr,ascale1_nr=wscale1_nr,
# ascale_cens=ascale_c,
ascale_cens=ascale_cens1,
tau=3,truncated=T)) > z_alpha)/nsim
powerNT_lr1 <- sum(replicate(nsim,  fun_simtest_LR(n0=118,n1=117,
p0=p0,p1=p1,
bshape0=1,bshape1=1,
ascale0_r=wscale0_r,ascale1_r=wscale1_r,
ascale0_nr=wscale0_nr,ascale1_nr=wscale1_nr,
# ascale_cens=ascale_c,
ascale_cens=ascale_cens1,
tau=3,truncated=T)) > q_chi)/nsim
##
powerNT_rmst2 <- sum(replicate(nsim, fun_simtest(n0=118,n1=117,
p0=p0,p1=p1,
bshape0=1,bshape1=1,
ascale0_r=wscale0_r,ascale1_r=wscale1_r,
ascale0_nr=wscale0_nr,ascale1_nr=wscale1_nr,
# ascale_cens=ascale_c,
ascale_cens=ascale_cens2,
tau=3,truncated=T)) > z_alpha)/nsim
powerNT_lr2 <- sum(replicate(nsim,  fun_simtest_LR(n0=118,n1=117,
p0=p0,p1=p1,
bshape0=1,bshape1=1,
ascale0_r=wscale0_r,ascale1_r=wscale1_r,
ascale0_nr=wscale0_nr,ascale1_nr=wscale1_nr,
# ascale_cens=ascale_c,
ascale_cens=ascale_cens2,
tau=3,truncated=T)) > q_chi)/nsim
list(powerNT_rmst=powerNT_rmst,powerNT_lr=powerNT_lr,powerNT_rmst1=powerNT_rmst1,powerNT_lr1=powerNT_lr1,powerNT_rmst2=powerNT_rmst2,powerNT_lr2=powerNT_lr2)
(c(power_rmst,power_lr))
list(power_rmst=power_rmst,power_lr=power_lr,power_rmst1=power_rmst1,power_lr1=power_lr1,power_rmst2=power_rmst2,power_lr2=power_lr2)
(c(powerNT_rmst,powerNT_lr))
list(powerNT_rmst=powerNT_rmst,powerNT_lr=powerNT_lr,powerNT_rmst1=powerNT_rmst1,powerNT_lr1=powerNT_lr1,powerNT_rmst2=powerNT_rmst2,powerNT_lr2=powerNT_lr2)
rm(list = ls())
setwd("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survmixer/code_PAPER/Example")
source('C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survmixer/code_PAPER/Simulations/Functions.R')
library(ggplot2)
################################################################
# Functions
################################################################
# Weibull parametrization
# S(x) =  exp(- (x/a)^b)
# param_scale: returns the value of the scale parameter a given the survival (s) at time t
param_scale <- function(s,t,shape=1){
scale = -t/((log(s))^(1/shape))
return(scale)
}
# OLD
# param_exp <- function(s,t){
#   p = (-log(s))/t
#   return(p)
# }
################################################################
# From Figure 3: Subgroup analysis for event-free survival
s1_r = 0.87
s0_r = 0.55
s1_nr = 0.38
s0_nr = 0.41
wscale1_r = param_scale(s=s1_r, t=5)
wscale0_r = param_scale(s=s0_r, t=5)
wscale1_nr = param_scale(s=s1_nr, t=5)
wscale0_nr = param_scale(s=s0_nr, t=5)
# Censoring distribution
# mean0_nr = meanw_f(ascale=wscale0_nr,bshape=1)
# ascale_c = 2*mean0_nr
# Response pCR
p1=45/117
p0=23/118
p= 68/235
################################################################
# Simulation study
library(survRM2)
library(survival)
source('C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survmixer/code_PAPER/Simulations/Sim_Functions.R')
# library(xlsx)
set.seed(1452)
# set.seed(2020)
alpha=0.05
beta=0.2
z_alpha <- qnorm(1-alpha,0,1)
z_beta <-  qnorm(1-beta,0,1)
q_chi=qchisq(1-alpha, df=1)
# nsim: number of simulations
nsim=10000
# Using our design
(n= survw_samplesize(ascale0_r=wscale0_r, ascale0_nr=wscale0_nr, delta_p=p1-p0, p0=p0, bshape0=1, bshape1=1, ascale1_r=wscale1_r,
ascale1_nr=wscale1_nr,
# ascale_cens = ascale_c,
ascale_cens = 7,
tau=5, alpha=0.05, beta=0.2))
power_rmst <- sum(replicate(nsim, fun_simtest(n0=n/2,n1=n/2,
p0=p0,p1=p1,
bshape0=1,bshape1=1,
ascale0_r=wscale0_r,ascale1_r=wscale1_r,
ascale0_nr=wscale0_nr,ascale1_nr=wscale1_nr,
# ascale_cens=ascale_c,
ascale_cens=7,
tau=5,truncated=T)) > z_alpha)/nsim
power_lr <- sum(replicate(nsim,  fun_simtest_LR(n0=n/2,n1=n/2,
p0=p0,p1=p1,
bshape0=1,bshape1=1,
ascale0_r=wscale0_r,ascale1_r=wscale1_r,
ascale0_nr=wscale0_nr,ascale1_nr=wscale1_nr,
# ascale_cens=ascale_c,
ascale_cens=7,
tau=5,truncated=T)) > q_chi)/nsim
(c(power_rmst,power_lr))
################################################################
# Using NOAH's design
powerNT_rmst <- sum(replicate(nsim, fun_simtest(n0=118,n1=117,
p0=p0,p1=p1,
bshape0=1,bshape1=1,
ascale0_r=wscale0_r,ascale1_r=wscale1_r,
ascale0_nr=wscale0_nr,ascale1_nr=wscale1_nr,
# ascale_cens=ascale_c,
ascale_cens=7,
tau=3,truncated=T)) > z_alpha)/nsim
powerNT_lr <- sum(replicate(nsim,  fun_simtest_LR(n0=118,n1=117,
p0=p0,p1=p1,
bshape0=1,bshape1=1,
ascale0_r=wscale0_r,ascale1_r=wscale1_r,
ascale0_nr=wscale0_nr,ascale1_nr=wscale1_nr,
# ascale_cens=ascale_c,
ascale_cens=7,
tau=3,truncated=T)) > q_chi)/nsim
(c(powerNT_rmst,powerNT_lr))
################################################################
# Different censoring situations
1-survw_f(t=5,ascale=5,bshape=1)
1-survw_f(t=5,ascale=7,bshape=1)
1-survw_f(t=5,ascale=10,bshape=1)
ascale_cens1=5
ascale_cens2=10
(n= survw_samplesize(ascale0_r=wscale0_r, ascale0_nr=wscale0_nr, delta_p=p1-p0, p0=p0, bshape0=1, bshape1=1, ascale1_r=wscale1_r,
ascale1_nr=wscale1_nr,
ascale_cens = ascale_cens1,
tau=5, alpha=0.05, beta=0.2))
power_rmst1 <- sum(replicate(nsim, fun_simtest(n0=n/2,n1=n/2,
p0=p0,p1=p1,
bshape0=1,bshape1=1,
ascale0_r=wscale0_r,ascale1_r=wscale1_r,
ascale0_nr=wscale0_nr,ascale1_nr=wscale1_nr,
# ascale_cens=ascale_c,
ascale_cens=ascale_cens1,
tau=5,truncated=T)) > z_alpha)/nsim
power_lr1 <- sum(replicate(nsim,  fun_simtest_LR(n0=n/2,n1=n/2,
p0=p0,p1=p1,
bshape0=1,bshape1=1,
ascale0_r=wscale0_r,ascale1_r=wscale1_r,
ascale0_nr=wscale0_nr,ascale1_nr=wscale1_nr,
# ascale_cens=ascale_c,
ascale_cens=ascale_cens1,
tau=5,truncated=T)) > q_chi)/nsim
##
(n= survw_samplesize(ascale0_r=wscale0_r, ascale0_nr=wscale0_nr, delta_p=p1-p0, p0=p0, bshape0=1, bshape1=1, ascale1_r=wscale1_r,
ascale1_nr=wscale1_nr,
# ascale_cens = ascale_c,
ascale_cens = ascale_cens2,
tau=5, alpha=0.05, beta=0.2))
power_rmst2 <- sum(replicate(nsim, fun_simtest(n0=n/2,n1=n/2,
p0=p0,p1=p1,
bshape0=1,bshape1=1,
ascale0_r=wscale0_r,ascale1_r=wscale1_r,
ascale0_nr=wscale0_nr,ascale1_nr=wscale1_nr,
# ascale_cens=ascale_c,
ascale_cens=ascale_cens2,
tau=5,truncated=T)) > z_alpha)/nsim
power_lr2 <- sum(replicate(nsim,  fun_simtest_LR(n0=n/2,n1=n/2,
p0=p0,p1=p1,
bshape0=1,bshape1=1,
ascale0_r=wscale0_r,ascale1_r=wscale1_r,
ascale0_nr=wscale0_nr,ascale1_nr=wscale1_nr,
# ascale_cens=ascale_c,
ascale_cens=ascale_cens2,
tau=5,truncated=T)) > q_chi)/nsim
list(power_rmst=power_rmst,power_lr=power_lr,power_rmst1=power_rmst1,power_lr1=power_lr1,power_rmst2=power_rmst2,power_lr2=power_lr2)
# Simulations under different censoring situations (NOAH Study)
powerNT_rmst1 <- sum(replicate(nsim, fun_simtest(n0=118,n1=117,
p0=p0,p1=p1,
bshape0=1,bshape1=1,
ascale0_r=wscale0_r,ascale1_r=wscale1_r,
ascale0_nr=wscale0_nr,ascale1_nr=wscale1_nr,
# ascale_cens=ascale_c,
ascale_cens=ascale_cens1,
tau=3,truncated=T)) > z_alpha)/nsim
powerNT_lr1 <- sum(replicate(nsim,  fun_simtest_LR(n0=118,n1=117,
p0=p0,p1=p1,
bshape0=1,bshape1=1,
ascale0_r=wscale0_r,ascale1_r=wscale1_r,
ascale0_nr=wscale0_nr,ascale1_nr=wscale1_nr,
# ascale_cens=ascale_c,
ascale_cens=ascale_cens1,
tau=3,truncated=T)) > q_chi)/nsim
##
powerNT_rmst2 <- sum(replicate(nsim, fun_simtest(n0=118,n1=117,
p0=p0,p1=p1,
bshape0=1,bshape1=1,
ascale0_r=wscale0_r,ascale1_r=wscale1_r,
ascale0_nr=wscale0_nr,ascale1_nr=wscale1_nr,
# ascale_cens=ascale_c,
ascale_cens=ascale_cens2,
tau=3,truncated=T)) > z_alpha)/nsim
powerNT_lr2 <- sum(replicate(nsim,  fun_simtest_LR(n0=118,n1=117,
p0=p0,p1=p1,
bshape0=1,bshape1=1,
ascale0_r=wscale0_r,ascale1_r=wscale1_r,
ascale0_nr=wscale0_nr,ascale1_nr=wscale1_nr,
# ascale_cens=ascale_c,
ascale_cens=ascale_cens2,
tau=3,truncated=T)) > q_chi)/nsim
list(powerNT_rmst=powerNT_rmst,powerNT_lr=powerNT_lr,powerNT_rmst1=powerNT_rmst1,powerNT_lr1=powerNT_lr1,powerNT_rmst2=powerNT_rmst2,powerNT_lr2=powerNT_lr2)
rm(list = ls())
setwd("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survmixer/code_PAPER/Example")
source('C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survmixer/code_PAPER/Simulations/Functions.R')
library(ggplot2)
################################################################
# Functions
################################################################
# Weibull parametrization
# S(x) =  exp(- (x/a)^b)
# param_scale: returns the value of the scale parameter a given the survival (s) at time t
param_scale <- function(s,t,shape=1){
scale = -t/((log(s))^(1/shape))
return(scale)
}
# OLD
# param_exp <- function(s,t){
#   p = (-log(s))/t
#   return(p)
# }
################################################################
# From Figure 3: Subgroup analysis for event-free survival
s1_r = 0.87
s0_r = 0.55
s1_nr = 0.38
s0_nr = 0.41
wscale1_r = param_scale(s=s1_r, t=5)
wscale0_r = param_scale(s=s0_r, t=5)
wscale1_nr = param_scale(s=s1_nr, t=5)
wscale0_nr = param_scale(s=s0_nr, t=5)
# Censoring distribution
# mean0_nr = meanw_f(ascale=wscale0_nr,bshape=1)
# ascale_c = 2*mean0_nr
# Response pCR
p1=45/117
p0=23/118
p= 68/235
################################################################
# Simulation study
library(survRM2)
library(survival)
source('C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survmixer/code_PAPER/Simulations/Sim_Functions.R')
# library(xlsx)
set.seed(1452)
alpha=0.05
beta=0.2
z_alpha <- qnorm(1-alpha,0,1)
z_beta <-  qnorm(1-beta,0,1)
q_chi=qchisq(1-alpha, df=1)
# nsim: number of simulations
nsim=10000
# Using our design
(n= survw_samplesize(ascale0_r=wscale0_r, ascale0_nr=wscale0_nr, delta_p=p1-p0, p0=p0, bshape0=1, bshape1=1, ascale1_r=wscale1_r,
ascale1_nr=wscale1_nr,
# ascale_cens = ascale_c,
ascale_cens = 7,
tau=5, alpha=0.05, beta=0.2))
power_rmst <- sum(replicate(nsim, fun_simtest(n0=n/2,n1=n/2,
p0=p0,p1=p1,
bshape0=1,bshape1=1,
ascale0_r=wscale0_r,ascale1_r=wscale1_r,
ascale0_nr=wscale0_nr,ascale1_nr=wscale1_nr,
# ascale_cens=ascale_c,
ascale_cens=7,
tau=5,truncated=T)) > z_alpha)/nsim
power_lr <- sum(replicate(nsim,  fun_simtest_LR(n0=n/2,n1=n/2,
p0=p0,p1=p1,
bshape0=1,bshape1=1,
ascale0_r=wscale0_r,ascale1_r=wscale1_r,
ascale0_nr=wscale0_nr,ascale1_nr=wscale1_nr,
# ascale_cens=ascale_c,
ascale_cens=7,
tau=5,truncated=T)) > q_chi)/nsim
(c(power_rmst,power_lr))
################################################################
# Using NOAH's design
powerNT_rmst <- sum(replicate(nsim, fun_simtest(n0=118,n1=117,
p0=p0,p1=p1,
bshape0=1,bshape1=1,
ascale0_r=wscale0_r,ascale1_r=wscale1_r,
ascale0_nr=wscale0_nr,ascale1_nr=wscale1_nr,
# ascale_cens=ascale_c,
ascale_cens=7,
tau=3,truncated=T)) > z_alpha)/nsim
powerNT_lr <- sum(replicate(nsim,  fun_simtest_LR(n0=118,n1=117,
p0=p0,p1=p1,
bshape0=1,bshape1=1,
ascale0_r=wscale0_r,ascale1_r=wscale1_r,
ascale0_nr=wscale0_nr,ascale1_nr=wscale1_nr,
# ascale_cens=ascale_c,
ascale_cens=7,
tau=3,truncated=T)) > q_chi)/nsim
(c(powerNT_rmst,powerNT_lr))
################################################################
# Different censoring situations
set.seed(2020)
1-survw_f(t=5,ascale=5,bshape=1)
1-survw_f(t=5,ascale=7,bshape=1)
1-survw_f(t=5,ascale=10,bshape=1)
ascale_cens1=5
ascale_cens2=10
(n= survw_samplesize(ascale0_r=wscale0_r, ascale0_nr=wscale0_nr, delta_p=p1-p0, p0=p0, bshape0=1, bshape1=1, ascale1_r=wscale1_r,
ascale1_nr=wscale1_nr,
ascale_cens = ascale_cens1,
tau=5, alpha=0.05, beta=0.2))
power_rmst1 <- sum(replicate(nsim, fun_simtest(n0=n/2,n1=n/2,
p0=p0,p1=p1,
bshape0=1,bshape1=1,
ascale0_r=wscale0_r,ascale1_r=wscale1_r,
ascale0_nr=wscale0_nr,ascale1_nr=wscale1_nr,
# ascale_cens=ascale_c,
ascale_cens=ascale_cens1,
tau=5,truncated=T)) > z_alpha)/nsim
power_lr1 <- sum(replicate(nsim,  fun_simtest_LR(n0=n/2,n1=n/2,
p0=p0,p1=p1,
bshape0=1,bshape1=1,
ascale0_r=wscale0_r,ascale1_r=wscale1_r,
ascale0_nr=wscale0_nr,ascale1_nr=wscale1_nr,
# ascale_cens=ascale_c,
ascale_cens=ascale_cens1,
tau=5,truncated=T)) > q_chi)/nsim
##
(n= survw_samplesize(ascale0_r=wscale0_r, ascale0_nr=wscale0_nr, delta_p=p1-p0, p0=p0, bshape0=1, bshape1=1, ascale1_r=wscale1_r,
ascale1_nr=wscale1_nr,
# ascale_cens = ascale_c,
ascale_cens = ascale_cens2,
tau=5, alpha=0.05, beta=0.2))
power_rmst2 <- sum(replicate(nsim, fun_simtest(n0=n/2,n1=n/2,
p0=p0,p1=p1,
bshape0=1,bshape1=1,
ascale0_r=wscale0_r,ascale1_r=wscale1_r,
ascale0_nr=wscale0_nr,ascale1_nr=wscale1_nr,
# ascale_cens=ascale_c,
ascale_cens=ascale_cens2,
tau=5,truncated=T)) > z_alpha)/nsim
power_lr2 <- sum(replicate(nsim,  fun_simtest_LR(n0=n/2,n1=n/2,
p0=p0,p1=p1,
bshape0=1,bshape1=1,
ascale0_r=wscale0_r,ascale1_r=wscale1_r,
ascale0_nr=wscale0_nr,ascale1_nr=wscale1_nr,
# ascale_cens=ascale_c,
ascale_cens=ascale_cens2,
tau=5,truncated=T)) > q_chi)/nsim
list(power_rmst=power_rmst,power_lr=power_lr,power_rmst1=power_rmst1,power_lr1=power_lr1,power_rmst2=power_rmst2,power_lr2=power_lr2)
# Simulations under different censoring situations (NOAH Study)
powerNT_rmst1 <- sum(replicate(nsim, fun_simtest(n0=118,n1=117,
p0=p0,p1=p1,
bshape0=1,bshape1=1,
ascale0_r=wscale0_r,ascale1_r=wscale1_r,
ascale0_nr=wscale0_nr,ascale1_nr=wscale1_nr,
# ascale_cens=ascale_c,
ascale_cens=ascale_cens1,
tau=3,truncated=T)) > z_alpha)/nsim
powerNT_lr1 <- sum(replicate(nsim,  fun_simtest_LR(n0=118,n1=117,
p0=p0,p1=p1,
bshape0=1,bshape1=1,
ascale0_r=wscale0_r,ascale1_r=wscale1_r,
ascale0_nr=wscale0_nr,ascale1_nr=wscale1_nr,
# ascale_cens=ascale_c,
ascale_cens=ascale_cens1,
tau=3,truncated=T)) > q_chi)/nsim
##
powerNT_rmst2 <- sum(replicate(nsim, fun_simtest(n0=118,n1=117,
p0=p0,p1=p1,
bshape0=1,bshape1=1,
ascale0_r=wscale0_r,ascale1_r=wscale1_r,
ascale0_nr=wscale0_nr,ascale1_nr=wscale1_nr,
# ascale_cens=ascale_c,
ascale_cens=ascale_cens2,
tau=3,truncated=T)) > z_alpha)/nsim
powerNT_lr2 <- sum(replicate(nsim,  fun_simtest_LR(n0=118,n1=117,
p0=p0,p1=p1,
bshape0=1,bshape1=1,
ascale0_r=wscale0_r,ascale1_r=wscale1_r,
ascale0_nr=wscale0_nr,ascale1_nr=wscale1_nr,
# ascale_cens=ascale_c,
ascale_cens=ascale_cens2,
tau=3,truncated=T)) > q_chi)/nsim
list(powerNT_rmst=powerNT_rmst,powerNT_lr=powerNT_lr,powerNT_rmst1=powerNT_rmst1,powerNT_lr1=powerNT_lr1,powerNT_rmst2=powerNT_rmst2,powerNT_lr2=powerNT_lr2)
