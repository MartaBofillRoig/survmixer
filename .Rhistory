#' Simulation multi-arm multi-stage clinical trials
#'
#' @description simulation of multi-arms with K stages
#'
#' @param N  square matrix where the (s,i)-element represents the sample size for the j-th arm in the s-th stage (columns represent treatment, rows  represent stage)
#' @param lambda vector of trends for each arm
#' @param mu vector of means
#' @param sig
#' @param linear linear or stepwise trend (if true linear; if false, stepwise).
#' @param graph
#'
#' @export
#' @import stats, ggplot2, parallel, speedglm
#'
#' @return
#'
#' @details 1) the linear trend is not exactly the same as in Lee & Wason (2020);
#' @author
#' @references  Lee, K. M., & Wason, J. (2020). Including non-concurrent control patients in the analysis of platform trials: Is it worth it? BMC Medical Research Methodology, 20(1), 1-12. https://doi.org/10.1186/s12874-020-01043-6
rm(list=ls())
simk = function(N,mu,sig = 1,lambda,linear=T,graph=F,graph_rcr=F){
require(ggplot2)
require(parallel)
require(speedglm)
require(qdapTools)
K = dim(N)[1] #number of stages
A = dim(N)[2] #number of arms
n = sum(N) #total sample size
############
# Treatment allocation
############
aux_f = function(s,A){
v = c()
for(i in 1:A){
if(N[s,i]>0){
# v = c(v,rep(i,N[i,s]))
v = c(v,rep(i,N[s,i]))
}
}
return(sample(v))
}
# lapply(1:K,FUN=aux_f,K=K)
trt = unlist(lapply(1:K,FUN=aux_f,A=A), use.names=FALSE)
# Martin's version for two stages
# trt = c(sample(c(rep(1, n01), rep(2, n11)), n1), sample(c(rep(1, n02), rep(2, n12), rep(3, n22)), n2))
############
# Time trends
############
if(linear) time = 1:n/n else  time=1:n>n1
aux_f2 = function(i,lambda,time){lambda[i]*time}
trend = sapply(X=1:A,FUN=aux_f2,lambda=lambda,time=time)
# Martin's version for two stages
# trend = matrix(c(lambda * time, 0 * time , lambda * time),
#                byrow = F,
#                nrow = n)
############
# data simulation
############
y = rnorm(n, mean = mu[trt] + trend[cbind(1:n, trt)], sd = sig)
dat = data.frame(y = y,
trt = factor(trt),
int=1,
(mtabulate(factor(trt))!=0)[,2:A], # trt1=trt==2,trt2=trt==3,
time = time)
modf=speedlm.fit(X=data.matrix(dat[,3:dim(dat)[2]]),y)
stderr=sqrt(modf$RSS*solve(modf$XTX)[3,3]/modf$df.residual)
# Martin's version for two stages
# trend = matrix(c(lambda * time, 0 * time , lambda * time),
#                byrow = F,
#                nrow = n)
if (graph) {
mod = lm(y ~ trt + time, data = dat)
#summary(mod)
dat$pred = predict(mod)
pl=ggplot(dat) +
geom_point(aes(x = 1:n/n, y = y, color = trt)) +
geom_line(aes(x = 1:n/n, y = pred, color = trt),size=1.3)
return(pl)
}
if (graph_rcr) {
dat$rcr = c()
for(j in 1:A)
dat$rcr[dat$trt==j] = 1:dim(subset(dat,dat$trt==j))[1]
data = data.frame(dat)
pl = ggplot(aes(x = time, y = rcr, color = trt), data=data) + geom_point() + geom_line()
return(pl)
}
else return(list(coef=modf$coef[3],p_val=1-pt(modf$coef[3]/stderr,df=modf$df.residual),data=dat))
}
#####################
set.seed(510)
# Inputs:
m = 10
n01 = 1 * m
n11 = 1 * m
n31 = 0 * m
n41 = 0 * m
n02 = 1 * m
n12 = 1 * m
n32 = 2 * m
n42 = 0 * m
n03 = 1 * m
n13 = 1 * m
n33 = 1 * m
n43 = 3 * m
#
# Sample size as matrix
N1 = c(n01,n11,n31,n41) # sample sizes stage 1
N2 = c(n02,n12,n32,n42) # sample sizes stage 2
N3 = c(n03,n13,n33,n43) # sample sizes stage 3
N = matrix(c(N1,N2,N3),
byrow = T,
nrow = 3)
#
linear = T
lambda = c(1,0,1,1)
mu = c(0,0,0,0)
sig=1
simk(N,mu,sig = 1,lambda,linear=T,graph_rcr = T)
N
rm(list=ls())
# Create r package folder
sethis::create_package("~/Desktop/tb_platform")
usethis::create_package("~/Desktop/tb_platform")
usethis::create_package("~/Desktop/TBplatform")
rm(list = ls())
load("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survmixer/code_PAPER/Simulations/results_sim/RESULTS_sim.RData")
library(ggplot2)
library(gridExtra)
library(ggpubr)
library(hrbrthemes)
library(viridis)
data$cases = 4
for(i in 1:dim(data)[1]){
if(data$Delta_r[i]==0 & data$Delta_nr[i]==0) data$cases[i]= 1
if(data$Delta_r[i]==0 & data$Delta_nr[i]!=0) data$cases[i]= 2
if(data$Delta_r[i]!=0 & data$Delta_nr[i]==0) data$cases[i]=3
}
data$cases = as.factor(data$cases)
summary(data$cases)
data$diff_power = data$Test_Reject - data$Test_Reject_LR
data$diff_alpha = data$Test_Reject_size - data$Test_Reject_LR_size
summary(data$os_samplesize)
data = subset(data, data$os_samplesize>100 & data$os_samplesize<5000)
summary(data$os_samplesize)
summary(data$os_effect)
summary(data)
median(data$Test_Reject);sd(data$Test_Reject)
median(data$Test_Reject_LR);sd(data$Test_Reject_LR)
median(data$Test_Reject_size);sd(data$Test_Reject_size)
median(data$Test_Reject_LR_size);sd(data$Test_Reject_LR_size)
############
# Boxplots alpha and power
windows(height = 14, width = 14)
p1 <- ggplot(data, aes(x=cases, y=Test_Reject,  color=cases)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="grey50", size=0.8, alpha=1,position=position_jitter(width = 0.1)) + labs(y = "Power RMST test", x ="Settings", color ="Settings")+ coord_cartesian(ylim = c(0.65, 1))#+ ylim(0.65, 0.9)
p2 <- ggplot(data, aes(x=cases, y=Test_Reject_LR,  color=cases)) +
geom_boxplot() + labs(y = "Power log-rank test", x ="Settings", color ="Settings")+ coord_cartesian(ylim = c(0.65, 1)) +
# geom_point(color="grey50") +
scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="grey50", size=0.8, alpha=1,position=position_jitter(width = 0.1))
+ labs(y = "Power log-rank test", x ="Settings", color ="Settings") + coord_cartesian(ylim = c(0.65, 1))#+ ylim(0.65, 0.9)
diff_p12 <- ggplot(data, aes(x=cases, y=diff_power,  color=cases)) +
geom_boxplot()  + labs(y = "Difference Power (RMST - log-rank) ", x ="Settings", color ="Settings") #+ coord_cartesian(ylim = c(-0.1, 0.1))
p3 <- ggplot(data, aes(x=cases, y=Test_Reject_size, color=cases)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="grey50", size=0.8, alpha=1,position=position_jitter(width = 0.1)) + labs(y = "Significance level RMST test", x ="Settings", color ="Settings")  + coord_cartesian(ylim = c(0.035, 0.08)) # + ylim(0.035, 0.09)
p4 <- ggplot(data, aes(x=cases, y=Test_Reject_LR_size, color=cases)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="grey50", size=0.8, alpha=1,position=position_jitter(width = 0.1)) + labs(y = "Significance level log-rank test", x ="Settings", color ="Settings") + coord_cartesian(ylim = c(0.035, 0.08)) # + ylim(0.035, 0.09)
diff_p34 <- ggplot(data, aes(x=cases, y=diff_alpha,  color=cases)) +
geom_boxplot()  + labs(y = "Difference Significance level (RMST - log-rank )", x ="Settings", color ="Settings")+ coord_cartesian(ylim = c(-0.03, 0.03))
figure <- ggarrange(p1,p2,diff_p12,p3,p4,diff_p34, ncol=3, nrow=2, common.legend = TRUE, legend="bottom")
annotate_figure(figure,
top = text_grob("Power and Significance level",
# top = text_grob(expression(paste("Power and Significance level (", bshape^{(0)}, "=", bshape^{(1)}, ")")),
face = "bold", size = 14))
windows(height = 14, width = 12)
figure_mod <- ggarrange(p1,p2,p3,p4, ncol=2, nrow=2, common.legend = TRUE, legend="bottom")
annotate_figure(figure_mod,
top = text_grob("Power and Significance level",
# top = text_grob(expression(paste("Power and Significance level (", bshape^{(0)}, "=", bshape^{(1)}, ")")),
face = "bold", size = 14))
ggplot(data, aes(x=cases, y=Test_Reject,  color=cases)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="grey50", size=0.8, alpha=1,position=position_jitter(width = 0.1)) + labs(y = "Power RMST test", x ="Settings", color ="Settings")+ coord_cartesian(ylim = c(0.65, 1))#+ ylim(0.65, 0.9)
ggplot(data, aes(x=cases, y=Test_Reject_LR,  color=cases)) +
geom_boxplot() + labs(y = "Power log-rank test", x ="Settings", color ="Settings")+ coord_cartesian(ylim = c(0.65, 1)) +
# geom_point(color="grey50") +
scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="grey50", size=0.8, alpha=1,position=position_jitter(width = 0.1))
+ labs(y = "Power log-rank test", x ="Settings", color ="Settings") + coord_cartesian(ylim = c(0.65, 1))#+ ylim(0.65, 0.9)
ggplot(data, aes(x=cases, y=Test_Reject_LR,  color=cases)) +
geom_boxplot() + labs(y = "Power log-rank test", x ="Settings", color ="Settings")+ coord_cartesian(ylim = c(0.65, 1)) +
# geom_point(color="grey50") +
scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="grey50", size=0.8, alpha=1,position=position_jitter(width = 0.1))
+ labs(y = "Power log-rank test", x ="Settings", color ="Settings") + coord_cartesian(ylim = c(0.65, 1))#+ ylim(0.65, 0.9)
ggplot(data, aes(x=cases, y=Test_Reject,  color=cases)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha=0.6) + labs(y = "Power RMST test", x ="Settings", color ="Settings")+ coord_cartesian(ylim = c(0.65, 1)) +
geom_jitter(color="grey50", size=0.8, alpha=1, position=position_jitter(width = 0.1))
ggplot(data, aes(x=cases, y=Test_Reject,  color=cases)) +
geom_boxplot(outlier.shape = NA) +
scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="grey50", size=0.8, alpha=1,position=position_jitter(width = 0.1)) + labs(y = "Power RMST test", x ="Settings", color ="Settings")+ coord_cartesian(ylim = c(0.65, 1))#+ ylim(0.65, 0.9)
rm(list = ls())
load("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survmixer/code_PAPER/Simulations/results_sim/RESULTS_sim.RData")
library(ggplot2)
library(gridExtra)
library(ggpubr)
library(hrbrthemes)
library(viridis)
data$cases = 4
for(i in 1:dim(data)[1]){
if(data$Delta_r[i]==0 & data$Delta_nr[i]==0) data$cases[i]= 1
if(data$Delta_r[i]==0 & data$Delta_nr[i]!=0) data$cases[i]= 2
if(data$Delta_r[i]!=0 & data$Delta_nr[i]==0) data$cases[i]=3
}
data$cases = as.factor(data$cases)
summary(data$cases)
data$diff_power = data$Test_Reject - data$Test_Reject_LR
data$diff_alpha = data$Test_Reject_size - data$Test_Reject_LR_size
summary(data$os_samplesize)
data = subset(data, data$os_samplesize>100 & data$os_samplesize<5000)
summary(data$os_samplesize)
summary(data$os_effect)
summary(data)
median(data$Test_Reject);sd(data$Test_Reject)
median(data$Test_Reject_LR);sd(data$Test_Reject_LR)
median(data$Test_Reject_size);sd(data$Test_Reject_size)
median(data$Test_Reject_LR_size);sd(data$Test_Reject_LR_size)
############
# Boxplots alpha and power
windows(height = 14, width = 14)
p1 <- ggplot(data, aes(x=cases, y=Test_Reject,  color=cases)) +
geom_boxplot(outlier.shape = NA) +
scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="grey50", size=0.8, alpha=1,position=position_jitter(width = 0.1)) + labs(y = "Power RMST test", x ="Settings", color ="Settings")+ coord_cartesian(ylim = c(0.65, 1))#+ ylim(0.65, 0.9)
p2 <- ggplot(data, aes(x=cases, y=Test_Reject_LR,  color=cases)) +
geom_boxplot(outlier.shape = NA) + labs(y = "Power log-rank test", x ="Settings", color ="Settings")+ coord_cartesian(ylim = c(0.65, 1)) +
# geom_point(color="grey50") +
scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="grey50", size=0.8, alpha=1,position=position_jitter(width = 0.1))
+ labs(y = "Power log-rank test", x ="Settings", color ="Settings") + coord_cartesian(ylim = c(0.65, 1))#+ ylim(0.65, 0.9)
diff_p12 <- ggplot(data, aes(x=cases, y=diff_power,  color=cases)) +
geom_boxplot()  + labs(y = "Difference Power (RMST - log-rank) ", x ="Settings", color ="Settings") #+ coord_cartesian(ylim = c(-0.1, 0.1))
p3 <- ggplot(data, aes(x=cases, y=Test_Reject_size, color=cases)) +
geom_boxplot(outlier.shape = NA) +
scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="grey50", size=0.8, alpha=1,position=position_jitter(width = 0.1)) + labs(y = "Significance level RMST test", x ="Settings", color ="Settings")  + coord_cartesian(ylim = c(0.035, 0.08)) # + ylim(0.035, 0.09)
p4 <- ggplot(data, aes(x=cases, y=Test_Reject_LR_size, color=cases)) +
geom_boxplot(outlier.shape = NA) +
scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="grey50", size=0.8, alpha=1,position=position_jitter(width = 0.1)) + labs(y = "Significance level log-rank test", x ="Settings", color ="Settings") + coord_cartesian(ylim = c(0.035, 0.08)) # + ylim(0.035, 0.09)
diff_p34 <- ggplot(data, aes(x=cases, y=diff_alpha,  color=cases)) +
geom_boxplot()  + labs(y = "Difference Significance level (RMST - log-rank )", x ="Settings", color ="Settings")+ coord_cartesian(ylim = c(-0.03, 0.03))
figure <- ggarrange(p1,p2,diff_p12,p3,p4,diff_p34, ncol=3, nrow=2, common.legend = TRUE, legend="bottom")
annotate_figure(figure,
top = text_grob("Power and Significance level",
# top = text_grob(expression(paste("Power and Significance level (", bshape^{(0)}, "=", bshape^{(1)}, ")")),
face = "bold", size = 14))
#
windows(height = 14, width = 12)
figure_mod <- ggarrange(p1,p2,p3,p4, ncol=2, nrow=2, common.legend = TRUE, legend="bottom")
annotate_figure(figure_mod,
top = text_grob("Power and Significance level",
# top = text_grob(expression(paste("Power and Significance level (", bshape^{(0)}, "=", bshape^{(1)}, ")")),
face = "bold", size = 14))
rm(list = ls())
library(devtools)
# Run once to configure your package to use pkgdown
usethis::use_pkgdown()
library(devtools)
# To create a new package
# usethis::create_package("~/Desktop/CompARE")
setwd("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survmixer/")
devtools::document()
devtools::load_all()
library(devtools)
# To create a new package
# usethis::create_package("~/Desktop/CompARE")
setwd("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survmixer/")
devtools::document()
devtools::load_all()
# Run once to configure your package to use pkgdown
usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
# Install development version from GitHub
devtools::install_github("martabofillr/survmixer", build = TRUE, force=T)
# Install development version from GitHub
devtools::install_github("MartaBofillRoig/survmixer", build = TRUE, force=T)
rm(list = ls())
library(devtools)
# Install development version from GitHub
devtools::install_github("MartaBofillRoig/survmixer", build = TRUE, force=T)
