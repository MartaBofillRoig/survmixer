100/3
round(100/3)
trunc(100/3)
round(100/3,1)
round(100/3)
library(usethis)
library(devtools)
usethis::create_package("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection")
usethis::create_package("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection/eselect")
usethis::create_package("~/Desktop/eselect")
load("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection/results/results_SS_add.RData")
View(dataset)
library(ggplot2)
library(parallel)
library(speedglm)
m = 5
n11 = 1 * m
n12 = 1 * m
n22 = 2 * m
n01 = 1 * m
n02 = 1 * m
n1 = n01 + n11
n2 = n02 + n12 + n22
n = n1 + n2
mu = c(0, 0, 0)
#lambda=1
#lambda=1
d=0;graph=F;linear=T;lambda=1;sig = 1
trt = c(sample(c(rep(1, n01), rep(2, n11)), n1), sample(c(rep(1, n02), rep(2, n12), rep(3, n22)), n2))
time=1:n>n1
time
trend = matrix(c(lambda * time, 0 * time , lambda * time),
byrow = F,
nrow = n)
trend
trend[cbind(1:n, trt)]
time = 1:n/n
trend = matrix(c(lambda * time, 0 * time , lambda * time),
byrow = F,
nrow = n)
trend
mu[trt]
mu = c(0, 0.15, 0.15)
trend = matrix(c(lambda * time, 0 * time , lambda * time),
byrow = F,
nrow = n)
trend = matrix(c(lambda * time, 0 * time , lambda * time),
byrow = F,
nrow = n)
trend
mu = c(0, 0.15, 0.15)
trt = c(sample(c(rep(1, n01), rep(2, n11)), n1), sample(c(rep(1, n02), rep(2, n12), rep(3, n22)), n2))
if(linear) time = 1:n/n else  time=1:n>n1
# NOTES:
# i) the linear trend is not exactly the same as in L&W
# ii) if false, stepwise
trend = matrix(c(lambda * time, 0 * time , lambda * time),
byrow = F,
nrow = n)
trend
trend[cbind(1:n, trt)]
trend = matrix(c(lambda * time, 0 * time , lambda * time),
byrow = F,
nrow = n)
trend[cbind(1:n, trt)]
trt
factor(trt)
time = 1:n/n
time
lambda * time
matrix(c(lambda * time, 0 * time , lambda * time),
byrow = F,
nrow = n)
time=1:n>n1
time
trend = matrix(c(lambda * time, 0 * time , lambda * time),
byrow = F,
nrow = n)
trend
cbind(1:n, trt)
trend[cbind(1, trt)]
trend[cbind(1, trt[1])]
trend[cbind(1:n, trt)]
trend[cbind(1:n, trt)[1]]
mu[trt]
trend[cbind(1:n, trt)[1]]
trend[cbind(1:n, trt)]
trt
time = 1:n/n
trend = matrix(c(lambda * time, 0 * time , lambda * time),
byrow = F,
nrow = n)
trt
mu[trt]
trend[cbind(1:n, trt)]
cbind(1:n, trt)
cbind(1:n, trt)[1]
trend = matrix(c(lambda * time, 0 * time , lambda * time),
byrow = F,
nrow = n)
# same time trend for control and arm 2
# no trend for arm 1
y = rnorm(n, mean = mu[trt] + trend[cbind(1:n, trt)], sd = sig)
dat = data.frame(y = y,
trt = factor(trt),int=1,trt1=trt==2,trt2=trt==3,
time = time)
modf=speedlm.fit(X=data.matrix(dat[,3:6]),y)
modf
dat[,3:6]
dat
trend = matrix(c(lambda * time, 0 * time , lambda * time),
byrow = F,
nrow = n)
cbind(1:n, trt)
mu[trt]
trend[cbind(1:n, trt)]
trend
cbind(1:n, trt)
trend[1]
trend
trend[2]
n
cbind(1:n, trt)
cbind(1:n, trt)[1]
cbind(1:n, trt)[2]
trend[cbind(1:n, trt)]
trend[cbind(1:n, trt)]
cbind(1:n, trt)
trend[cbind(1:n, trt)]
trend[trt]
length(trend[trt])
trt
mu[trt]
cbind(1:n, trt)
mu[cbind(1:n, trt)]
cbind(1:n, trt)
y = rnorm(n, mean = mu[trt] + trend[cbind(1:n, trt)], sd = sig)
dat = data.frame(y = y,
trt = factor(trt),int=1,trt1=trt==2,trt2=trt==3,
time = time)
modf=speedlm.fit(X=data.matrix(dat[,3:6]),y)
stderr=sqrt(modf$RSS*solve(modf$XTX)[3,3]/modf$df.residual)
sim=function(d=0,graph=F,linear=T,lambda=1,sig = 1)
{
trt = c(sample(c(rep(1, n01), rep(2, n11)), n1), sample(c(rep(1, n02), rep(2, n12), rep(3, n22)), n2))
if(linear) time = 1:n/n else  time=1:n>n1
# NOTES:
# i) the linear trend is not exactly the same as in L&W
# ii) if false, stepwise
trend = matrix(c(lambda * time, 0 * time , lambda * time),
byrow = F,
nrow = n)
# same time trend for control and arm 2; no trend for arm 1
y = rnorm(n, mean = mu[trt] + trend[cbind(1:n, trt)], sd = sig)
dat = data.frame(y = y,
trt = factor(trt),int=1,trt1=trt==2,trt2=trt==3,
time = time)
modf=speedlm.fit(X=data.matrix(dat[,3:6]),y)
stderr=sqrt(modf$RSS*solve(modf$XTX)[3,3]/modf$df.residual)
if (graph) {
mod = lm(y ~ trt + time, data = dat)
#summary(mod)
dat$pred = predict(mod)
pl=ggplot(dat) +
geom_point(aes(x = 1:n/n, y = y, color = trt)) +
geom_line(aes(x = 1:n/n, y = pred, color = trt),size=1.3)
return(pl)
}
else return(c(modf$coef[3],1-pt(modf$coef[3]/stderr,df=modf$df.residual)))
}
trend
trend[cbind(1:n, trt)]
library(ggplot2)
library(parallel)
library(speedglm)
m = 5
n11 = 1 * m
n12 = 1 * m
n22 = 2 * m
n01 = 1 * m
n02 = 1 * m
n1 = n01 + n11
n2 = n02 + n12 + n22
n = n1 + n2
mu = c(0, 0.15, 0.15)
mu = c(0, 0, 0)
#lambda=1
# d=0;graph=F;linear=T;lambda=1;sig = 1
sim=function(d=0,graph=F,linear=T,lambda=1,sig = 1)
{
trt = c(sample(c(rep(1, n01), rep(2, n11)), n1), sample(c(rep(1, n02), rep(2, n12), rep(3, n22)), n2))
if(linear) time = 1:n/n else  time=1:n>n1
# NOTES:
# i) the linear trend is not exactly the same as in L&W
# ii) if false, stepwise
trend = matrix(c(lambda * time, 0 * time , lambda * time),
byrow = F,
nrow = n)
# same time trend for control and arm 2; no trend for arm 1
y = rnorm(n, mean = mu[trt] + trend[cbind(1:n, trt)], sd = sig)
dat = data.frame(y = y,
trt = factor(trt),int=1,trt1=trt==2,trt2=trt==3,
time = time)
modf=speedlm.fit(X=data.matrix(dat[,3:6]),y)
stderr=sqrt(modf$RSS*solve(modf$XTX)[3,3]/modf$df.residual)
if (graph) {
mod = lm(y ~ trt + time, data = dat)
#summary(mod)
dat$pred = predict(mod)
pl=ggplot(dat) +
geom_point(aes(x = 1:n/n, y = y, color = trt)) +
geom_line(aes(x = 1:n/n, y = pred, color = trt),size=1.3)
return(pl)
}
else return(c(modf$coef[3],1-pt(modf$coef[3]/stderr,df=modf$df.residual)))
}
runs=10^3
#mu=c(0,0,.5)
mu=c(0,0,0)
#result=replicate(runs,sim(),simplify=T)
result=mapply(FUN=sim,matrix(1:runs),MoreArgs=list(lambda=0.04,sig=1,graph=F,linear=T))
result
View(result)
mean(result[2,]<0.025)
mean(result[1,])
mu=c(0,0,0)
sim(linear=F,lambda=.1,graph=F,sig=1)
sim(linear=F,lambda=.1,graph=F,sig=1)
#result=replicate(runs,sim(),simplify=T)
result=mapply(FUN=sim,matrix(1:runs),MoreArgs=list(lambda=0.04,sig=1,graph=F,linear=T))
mean(result[2,]<0.025)
mean(result[1,])
err=Vectorize(function(lamb)
mean(mcmapply(sim,matrix(1:runs),MoreArgs=list(lambda=lamb,sig=1,graph=F,linear=T))[2,]<0.025)
)
lv=seq(0,1,0.1)
runs=10^5
errv=err(lv)
plot(lv,errv,type="l",ylim=c(0,.1))
sim(linear=F,lambda=.1,graph=F,sig=1)
sim(linear=F,lambda=.1,graph=T,sig=1)
sim(linear=T,lambda=.1,graph=T,sig=1)
usethis::create_package("~/Desktop/nconcc")
# Install development version from GitHub
devtools::install_github("MartaBofillRoig/survmixer", build = TRUE, force=T)
# Run once to configure your package to use pkgdown
usethis::use_pkgdown()
setwd("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survmixer/")
# Run once to configure your package to use pkgdown
usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
